<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>probes - gaming</title>
    <link href="https://clux.github.io/probes.zola/categories/gaming/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://clux.github.io/probes.zola"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2022-10-30T00:00:00+00:00</updated>
    <id>https://clux.github.io/probes.zola/categories/gaming/atom.xml</id>
    <entry xml:lang="en">
        <title>Factober 5400</title>
        <published>2022-10-30T00:00:00+00:00</published>
        <updated>2022-10-30T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://clux.github.io/probes.zola/factober/" type="text/html"/>
        <id>https://clux.github.io/probes.zola/factober/</id>
        
        <content type="html">&lt;p&gt;Round two of escapism this year. This is a post for myself with various information as a conclusion to my recent fixation into designing an &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;factoriobox.1au.us&#x2F;map&#x2F;info&#x2F;64a9a7e7a7c45dc3fc2c0ade02dee4c1d3eede36123460c3761a39d901587306&quot;&gt;efficient and compact factorio megabase&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;plan&quot;&gt;Plan&lt;&#x2F;h2&gt;
&lt;p&gt;I keep coming back to this game about once a year. There is something very soothing about the type of play this game encourages. Playing factorio basically feels like being part of some parallel software project; there&#x27;s builtin dashboards, circuit logic, sharable blueprints, benchmarks, optimizations, and all without the usual externalities of a large software org&#x2F;project. And at this point for me, it&#x27;s all about the optimization and theorycrafting.&lt;&#x2F;p&gt;
&lt;p&gt;I set out with the &lt;strong&gt;following goal&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;produce &lt;strong&gt;2 full blue lanes of every science&lt;&#x2F;strong&gt; or 5400 SPM (Science Per Minute)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Certain cheats were used to avoid the less challenging parts of the game:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;spawning ore &#x2F; resources&lt;&#x2F;strong&gt; (to minimize ore replacement and transport work)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;speeding up the game&lt;&#x2F;strong&gt; (to simulate idling &#x2F; expansion and simplify moving around)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;disabling pollution&lt;&#x2F;strong&gt; (as the biters were contained and later defeated anyway)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;this lets us focus on the parts of the game that&#x27;s more interesting to me; optimizing the factory without having to deal with stuff running out or setting up new chaotic trains all the time. It also enables us to optimize the medium sized factory pieces in complete isolation without suddenly being limited by ore or UPS (that&#x27;s the equivalent part of managing a software project I am trying to avoid).&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;technicalfactorio&#x2F;comments&#x2F;nlnsoq&#x2F;20_x_1k_belt_cell_megabase_very_high_ups&#x2F;&quot;&gt;Copy-pasting&lt;&#x2F;a&gt; small &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;factorio&#x2F;comments&#x2F;v53qoe&#x2F;high_ups_40k_cell_base&#x2F;&quot;&gt;cell bases&lt;&#x2F;a&gt; is &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;technicalfactorio&#x2F;comments&#x2F;ni2055&#x2F;20k_rail_megafactory_that_runs_at_60_ups_on_my&#x2F;&quot;&gt;currently the leading way&lt;&#x2F;a&gt; to get the most productive bases without choking the game (i.e. maintaining 60 UPS).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We set out to make each &lt;strong&gt;science build&lt;&#x2F;strong&gt; be entirely &lt;strong&gt;self-contained&lt;&#x2F;strong&gt; with just a single train station as an output, and we built upon an old starter base that had already achieved almost 200 mining productivity.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sideprojects&quot;&gt;Sideprojects&lt;&#x2F;h3&gt;
&lt;p&gt;But before we get into it, here are several other things we built along the way that (in true factorio style) did not in any way contribute to the main goal.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;wildlife-preserve&quot;&gt;Wildlife Preserve&lt;&#x2F;h4&gt;
&lt;p&gt;..to justify all those military upgrades:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;wildlife-preserve.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;which we eventually eradicated in a comically inelegant way:&lt;&#x2F;p&gt;
&lt;div class=&quot;yv&quot;&gt;
    &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;gFvTfAO5pJs&quot; title=&quot;Youtube&quot; class=&quot;yvi&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;h4 id=&quot;fishing-outpost&quot;&gt;Fishing Outpost&lt;&#x2F;h4&gt;
&lt;p&gt;A sustainable ecosystem catching 600 fish over its lifetime on its own power&#x2F;robo network. Built right above the launchers:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;fishing-outpost.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;wood-burner&quot;&gt;Wood Burner&lt;&#x2F;h4&gt;
&lt;p&gt;An automated train service to get rid of all that wood:&lt;&#x2F;p&gt;
&lt;div class=&quot;yv&quot;&gt;
    &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;UqvxxgvbCaQ&quot; title=&quot;Youtube&quot; class=&quot;yvi&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;(normally triggers automatically, but there were no wood in the requester chests).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;factory-designs&quot;&gt;Factory Designs&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;rails&quot;&gt;Rails&lt;&#x2F;h3&gt;
&lt;p&gt;When starting out with production&#x2F;purple science I originally had 16 full blue belts of rails that fed into the purple science factories. Now we make rails inline in a single factory that feeds 4 purple science assemblers:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;purple-rail.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve not seen anyone else do this, but it works pretty well. It sushies sticks around two columns, and does a bit of crate magic to fit 6 input inserters, 3 input lanes, and 4 output inserters inside a 12 beaconed bounding box, but it actually works in the end.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;green-circuit-plastic-row&quot;&gt;Green Circuit &#x2F; Plastic Row&lt;&#x2F;h3&gt;
&lt;p&gt;One of the more optimized factory pieces. A single lane that produces a mostly full, mixed plastic&#x2F;green blue belt.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;green-lane.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It requires very precise spawning of coal, iron, copper so that we can have 2 chemical plants for plastic, and 4 smelters of iron + copper for a single 12 beaconed green factory. Some of the time all the furnaces are running:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;green-on.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The green factory is what requires special attention here:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;green-car.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;One green factory alone can actually &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kirkmcdonald.github.io&#x2F;calc.html#tab=graph&amp;amp;data=1-1-19&amp;amp;rate=s&amp;amp;min=3&amp;amp;belt=express-transport-belt&amp;amp;mprod=800&amp;amp;dm=p3&amp;amp;db=s3&amp;amp;dbc=24&amp;amp;t=off&amp;amp;items=electronic-circuit:f:1&quot;&gt;ALMOST supply a half belt (22.4 out of 22.5)&lt;&#x2F;a&gt; if you can fully beacon it. It&#x27;s just that doing this is very difficult because it takes more than a full blue belt of copper cables that it is very hard to supply it while making room for all the the iron and the outputs. This is why there&#x27;s a car in between the beacons that serves as a chest.&lt;&#x2F;p&gt;
&lt;p&gt;A car can be picked up from and inserted to at very strange angles at more than one length so it&#x27;s great for fitting irregular gaps that doesn&#x27;t work with chests (or would require more inserters). The game doesn&#x27;t want you to do this though. It cannot be copy-pasted so you have to plant it manually. &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=6mgQwzom0Xo&quot;&gt;Doshington showcases the pain this type of design leads to&lt;&#x2F;a&gt; .&lt;&#x2F;p&gt;
&lt;p&gt;You actually have to remove one middle beacon when the inserters starts running to trick the inserters to lock onto the car before planting the beacon down again (otherwise they want to grab the speed modules).&lt;&#x2F;p&gt;
&lt;p&gt;The end result is that you can transfer 24 cables to the assembler through a one space gap on every swing cycle.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;red-circuit-row&quot;&gt;Red Circuit Row&lt;&#x2F;h3&gt;
&lt;p&gt;Continuing onwards from the green &#x2F; plastic row, is another inline copper smelter section that joins into a nearly full copper cable assembler, that sufficiently feeds 8 factories of red chips.
The red chips are also inserter clocked so they all swing together which looks very satisfying, but I don&#x27;t think it actually helps with UPS.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;8f-red.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This joins onto the green setup so we can end up with these huge stacks for large red factories like this one for RCUs:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;red-rows-rcu.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;low-density-row&quot;&gt;Low Density Row&lt;&#x2F;h3&gt;
&lt;p&gt;A &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kirkmcdonald.github.io&#x2F;calc.html#tab=graph&amp;amp;data=1-1-19&amp;amp;rate=s&amp;amp;min=3&amp;amp;belt=express-transport-belt&amp;amp;mprod=800&amp;amp;dm=p3&amp;amp;db=s3&amp;amp;dbc=24&amp;amp;t=off&amp;amp;items=low-density-structure:f:10&quot;&gt;full row of low density structures can consist of 10 fully beaconed factories supplied by two lanes of copper&lt;&#x2F;a&gt;. It needs a lot of belts, and manual input setup, plus a bunch of inserters to load onto the belt and back in from the belt, so we searched for a more direct setup (without sacrificing too much at the number of machines).&lt;&#x2F;p&gt;
&lt;p&gt;The end setup has 20 smelters to 10 LDS assemblers, which is an extra 4 smelters than is needed, so we beacon them slightly less, but end up with 100% direct insertion on copper. The downside? Lots and lots of cars.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;lds-140cars.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This &lt;code&gt;70&#x2F;s&lt;&#x2F;code&gt; LDS factory for space science consists of 14 rows of 10 cars each, which is definitely a hassle to setup and filter.&lt;&#x2F;p&gt;
&lt;p&gt;Ideally the equally sized steel would be lined up to face LDS on the input side (like they are in yellow science below), because here we mix belts first then use splitters later just to avoid a 14 lane wide thing through the base.&lt;&#x2F;p&gt;
&lt;p&gt;Regardless, it looks different to everything else and is kind of beautiful at night:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;lds-at-night.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Enjoying the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kirkmcdonald.github.io&#x2F;calc.html#tab=graph&amp;amp;data=1-1-19&amp;amp;rate=s&amp;amp;min=3&amp;amp;belt=express-transport-belt&amp;amp;mprod=800&amp;amp;dm=p3&amp;amp;db=s3&amp;amp;dbc=24&amp;amp;t=off&amp;amp;items=low-density-structure:f:10&amp;amp;modules=copper-plate:;s3:20&quot;&gt;efficiency of the ratios&lt;&#x2F;a&gt;. All the smelters are running (94% avg utilization).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;labs&quot;&gt;Labs&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;labs.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Extracted this more conventional lab design to test it out &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;technicalfactorio&#x2F;comments&#x2F;y6c87j&#x2F;ups_wars_6_labs&#x2F;&quot;&gt;UPS Wars 6: Labs&lt;&#x2F;a&gt; for this with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;factoriobox.1au.us&#x2F;map&#x2F;info&#x2F;e1f29dac1355d49bc4036233ddad222698b2c158b198f790a20c9f87d5773d6f&quot;&gt;this entry&lt;&#x2F;a&gt;. Nothing remarkable, except perhaps for the long winding belts in different direction. It&#x27;s slightly overscaled to ensure it will fully drain half belts.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;trains&quot;&gt;Trains&lt;&#x2F;h2&gt;
&lt;p&gt;All of the science cities &#x2F; space component cities unload onto one of two major unload depots.&lt;&#x2F;p&gt;
&lt;p&gt;The main depots have robo networks to distribute nuclear fuel from a single supply train and they only stop at the hub (which is enough).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lab-depot&quot;&gt;Lab Depot&lt;&#x2F;h3&gt;
&lt;p&gt;Lab depot looks like a close-up of a complicated circuit:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;labs-cpu.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;lab-rails.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Very happy with this unload station. We pull exactly 4 half-belts and that can be perfectly filled via two inserters (with an 8 size override) at the cost of less buffer chests (that we don&#x27;t need those). No splitters anywhere!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rocket-depot&quot;&gt;Rocket Depot&lt;&#x2F;h3&gt;
&lt;p&gt;Probably not the most efficient train unloading, but gotta get 4 wagons of stuff into 6 launchers via 2 inserters per launcher so it&#x27;s tricky.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;space-science.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;space-unload.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Lot&#x27;s of 2x3 splitters and an eventually emptying unloader with a priority line down to satellites... It&#x27;s ultimately a little overscaled compared to the other sciences so a few seconds of semi-filled belts, while not particularly efficient, doesn&#x27;t hurt production.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nuclear-fuel&quot;&gt;Nuclear Fuel&lt;&#x2F;h3&gt;
&lt;p&gt;A minimal fuel factory that supplies all trains (piggy-backing on any oil refinery because it uses basically nothing). It&#x27;s almost never active because it only has destination stops available when the hubs have less than 200 items on the receiving chests (circuit network on the receiving side).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;nuclear-fuel.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;science-cities&quot;&gt;Science Cities&lt;&#x2F;h2&gt;
&lt;p&gt;Quickly going through these with factorio calc links.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;red&quot;&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kirkmcdonald.github.io&#x2F;calc.html#zip=dYrBCcMwDAC30c&#x2F;gxn00LhpGsRUwjSxjKdDxmwxQDu5xXCUnfISLFSY5o4G0jgk2Phz5OyabBZ&#x2F;Ubej0cGeQMbXiK0aogiNB3dBuF1ye4Kj7Ds1ZDOl0FfKmPVhp3AuHQeWTZ14jiNbz4P&#x2F;T21Je4g8=&quot;&gt;Red&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Max beaconing reds would give an awkward ratio whereas doing pairs here gives us just enough with 12F each column.
It would be possible to do 11F we did some at higher beaconing though.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;red.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;green&quot;&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kirkmcdonald.github.io&#x2F;calc.html#zip=bU3LCsMwDPsbnxpI2zHWDn9MmrgjLC9sF&#x2F;b5ay6DsSGhgySk4NThaE4swE4JBXIsOMNGSZFejUnEKLsirbKabkNuXAPerIWQsc0QNpSuHqcLKNZ9h6iUBVN9RNHojfhIxZNpzj9XXhcLuYYjkWAsQqzEq8wf3k8dr8P360&#x2F;BDv&#x2F;nezjZNw==&quot;&gt;Green&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Max beaconed smelters and an ad-hoc &amp;lt;4 half belt output of green circuits, and only max beaconing the last pack factory to fill the lane.
Again, max beaconing is just not enough with 12F per column pair, so doing pairs with one last max beaconed for 14Fx4. Zero splitters. More gear factories than necessary, but more direct insertion.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;green.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;both red + green on the map:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;redgreen.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;military&quot;&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kirkmcdonald.github.io&#x2F;calc.html#zip=fYtJCgJBDEVvk5UFrS2iLTlMrEo3wZpIIg6nVzeCCPI&#x2F;b&#x2F;GHRE64Di8dQMkZDYpUHOHE2ZFvXdksuFK13tTDO4bStSXcDwOkgn2EdEJ7M+JmC45tnkGci2GRLE56DxaFa+TQKZ4nnQ4DlJYumQ27sEapS9B2qclCoYUeUnmy8ePji+vdahZl0vJvsihXSl&#x2F;NyrxVDlfK+ffwBA==&quot;&gt;Military&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Annoyingly large for something that&#x27;s off most of the time. Lots of clocked smelters, and the actual main ingredient factories are tiny.. Did a cool inline wall thing for each row for the actual science pack, and a big grenade factory, but lots of room for improvement.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;black.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;One fun thing here though; this factory &lt;strong&gt;shuts off its own power&lt;&#x2F;strong&gt; when the train station buffer chests is full &lt;code&gt;and&lt;&#x2F;code&gt; no trains are at the station (circuit network connected to the chests and the train station via a combinator). This saves on power, but not on UPS, sadly.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chemical&quot;&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kirkmcdonald.github.io&#x2F;calc.html#data=1-1-19&amp;amp;rate=s&amp;amp;min=3&amp;amp;p=basic&amp;amp;belt=express-transport-belt&amp;amp;mprod=800&amp;amp;dm=p3&amp;amp;db=s3&amp;amp;dbc=24&amp;amp;t=off&amp;amp;items=chemical-science-pack:r:90&amp;amp;modules=pipe:s3:s3:s3:s3;s3:20,basic-oil-processing:;s3:32&quot;&gt;Chemical&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;All ore&#x2F;oil&#x2F;reds + inputs for reds on the left through the green car lane setup, and then on the right inline sulfur (turns out one chemical plant can supply 45&#x2F;s chemical science). Uses basic oil here because it&#x27;s not the most demanding, but other peoples&#x27; comments suggest it&#x27;s probably a wash performance wise.
&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;blue.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;blue2.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;production&quot;&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kirkmcdonald.github.io&#x2F;calc.html#zip=TY1dagMxDIRvo6cVbLKhNC46jGNri6j&#x2F;kJTQ3j5eSiBI6OGb0UyOHumEc66g0ZkMqjTa4MbFiX+Hshm6xmajq+OBoQ7tmT7XFXKlsUG+kR030fkCTn3fQZyr0eG7J5fe0JJwS4wjpp+g4bpCnVpho5gfcSoZuxScH2k2SvsOX7aF7bxw4eQqCfe7tpg4TPzaw3L6WF41D&#x2F;E&#x2F;&#x2F;I99dy0apbyDJw==&quot;&gt;Production&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;purple-inputs.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;a huge chunk of the factory is literally just dealing with steel for rails and furnaces:
&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;purple.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
which is a slightly overscaled (as can be seen from the few inactive furnaces), but it&#x27;s a bit unevenly drawn from atm.
&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;purple-steel.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;utility&quot;&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kirkmcdonald.github.io&#x2F;calc.html#data=1-1-19&amp;amp;rate=s&amp;amp;min=3&amp;amp;belt=express-transport-belt&amp;amp;mprod=800&amp;amp;dm=p3&amp;amp;db=s3&amp;amp;dbc=24&amp;amp;t=off&amp;amp;items=utility-science-pack:f:60&amp;amp;modules=advanced-oil-processing:;s3:32,pipe:s3:s3:s3:s3&quot;&gt;Utility&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Slightly overscaled (60F) and undersupplied (can supply 59F). 57F ended up in an awkward 3 column build that needed to be split a lot. Best to stick to 4 columns if you are going to load onto 4 wagons. Oil is split into two advanced oil parts; inner one for lube&#x2F;sulfuric and the outer just for petroleum for LDS.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;yellow.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;space-science&quot;&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kirkmcdonald.github.io&#x2F;calc.html#zip=XU7vasMxCHybfEqga&#x2F;qlGT6Mv8R1oebP1MAefymFsg2PEz3xzvCAm+D8dAUN4S3sujpBI1DXaofoJhyoNbuD2IC+p5BqMMGuc4iFx9qVBjO6coA+OMP54qpRU9CJmYLmSn33PdyTpOvJtVEWkwLmvNpitCFJ4ws+D+TA9WvRB2aro6f3LcSzFywoqS&#x2F;mf+R1h2betoniC14Ho2zjTvzHQEa+k21B7Pn64nUSlfBM9vv2Bw==&quot;&gt;Space Science&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Can just be done with six rocket launchers running near constantly provided we have the ingredients.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;rcu&quot;&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kirkmcdonald.github.io&#x2F;calc.html#zip=RY3NCsMwDIPfxqcG+nfoMvwwWeKOsCQOsTv2+EspY0jo8IGk4NThZLpu0JwSCuRYcIEHJUX61EYiRpsrUrmpOTHk2jjgNo4QMtYFwgPlTI&#x2F;zCoq87xCVsmBj&#x2F;yI1nos2TuYoUe1up22FzOFIJOjC2xVPwXBMps&#x2F;6fhfL095lscs8&#x2F;MlVPvE8DlKpV64N29HPXw==&quot;&gt;RCU&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Slightly overscaled because the speed module row looked awkward when optimal. Probably one of the most streamlined parts, but also most heavily abuses ore spawning (mixed lane inputs for both speed modules and blue processors).
Blue build is from Stevetrov&#x27;s cell base with a slight beaconing modification.
Tried tons of blue builds for this and they&#x27;re either all massive (like this), or they need double the amount of inserters for slightly more production, or they are smaller, but need so many belt inputs of plates that it&#x27;s super awkward to plot down and less efficient. Didn&#x27;t benchmark this for UPS, just went with gut feel based on smelter uptime, inserter numbers and inserter activity.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;rcu.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;lds&quot;&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kirkmcdonald.github.io&#x2F;calc.html#data=1-1-19&amp;amp;rate=s&amp;amp;min=3&amp;amp;belt=express-transport-belt&amp;amp;mprod=800&amp;amp;dm=p3&amp;amp;db=s3&amp;amp;dbc=24&amp;amp;t=off&amp;amp;items=low-density-structure:f:140&amp;amp;modules=advanced-oil-processing:;s3:32&quot;&gt;LDS&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Supplies both rockets and satellites.
&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;lds-140cars.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;rf-cf-rf2&quot;&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kirkmcdonald.github.io&#x2F;calc.html#data=1-1-19&amp;amp;rate=s&amp;amp;min=3&amp;amp;p=coal&amp;amp;belt=express-transport-belt&amp;amp;dm=p3&amp;amp;db=s3&amp;amp;dbc=24&amp;amp;items=rocket-fuel:f:112&amp;amp;modules=coal-liquefaction:;s3:32&quot;&gt;RF CF&lt;&#x2F;a&gt; + &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kirkmcdonald.github.io&#x2F;calc.html#data=1-1-19&amp;amp;rate=s&amp;amp;min=3&amp;amp;belt=express-transport-belt&amp;amp;dm=p3&amp;amp;db=s3&amp;amp;dbc=24&amp;amp;items=rocket-fuel:f:108&amp;amp;modules=advanced-oil-processing:;s3:32&quot;&gt;RF2&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Partially from coal liquefaction just because i wanted to learn how to do it well. It&#x27;s probably not the most optimal choice since it needs lots of mixed coal belts to get the coal in that deep (yes, yes).&lt;&#x2F;p&gt;
&lt;p&gt;CF build is undersupplied with 12 refineries, but doing it that way allows us not to copy paste the advanced oil one another time.
It ends up being almost perfectly scaled for the rockets + satellites. Belts &lt;strong&gt;just&lt;&#x2F;strong&gt; start to fill before the next train arrives.&lt;&#x2F;p&gt;
&lt;p&gt;All the solid fuel factories piggy-back on the ore clock for less swings.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;rocketfuel.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;cf.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
Pretty happy about the beaconing line-up with the refineries and chemical plants:
&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;cf-beaconing.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;satellites&quot;&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kirkmcdonald.github.io&#x2F;calc.html#zip=XYtdigMxDINvk6cJpZMtS1N8GE&#x2F;ihYDzU9uBHr8zD9vSog8hhJTREM5+19XV0iC4ARtqSW4jNqDHEFL1Jth0dDF&#x2F;1C5XGMHlDfTwBOuPK0ZVQdGIec9R4vp7urja82RSSB3Zc7lP+sNkpbd40xDDurwfFF4s2hnFD2zEcd&#x2F;9s2BKs05G6&#x2F;LRC2aU2Cbzlz0B&quot;&gt;Satellites&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;The final component. It&#x27;s better to look at calculator links for &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kirkmcdonald.github.io&#x2F;calc.html#zip=VYi9CsMwDAbfRpuHxl0S0MPIsQaDf4Q+BfL4bZZCueOGqxLCr&#x2F;RlJ5dQBo02OZNxEbSTivZgvc0VSOEyYcsjPZvqYMtUC+PpydubWugAY3XxZDK1H37sNFa9uv5&#x2F;5J8f&quot;&gt;Solar&lt;&#x2F;a&gt; + &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kirkmcdonald.github.io&#x2F;calc.html#data=1-1-19&amp;amp;min=3&amp;amp;p=basic&amp;amp;belt=express-transport-belt&amp;amp;dm=p3&amp;amp;db=s3&amp;amp;dbc=24&amp;amp;items=accumulator:r:540&amp;amp;modules=accumulator:s3:s3:s3:s3&quot;&gt;Accumulators&lt;&#x2F;a&gt; + &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kirkmcdonald.github.io&#x2F;calc.html#data=1-1-19&amp;amp;min=3&amp;amp;p=basic&amp;amp;belt=express-transport-belt&amp;amp;dm=p3&amp;amp;db=s3&amp;amp;dbc=24&amp;amp;items=processing-unit:r:540&quot;&gt;Processors&lt;&#x2F;a&gt; (the real output part of this chunk) because we leech LDS + RF from the trains.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;space-overview.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s a pretty ugly mess that was designed early, but it&#x27;s clocked and beaconed everywhere. Oh, and there&#x27;s only 5 inserters per sulfuric acid factory because cars.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;cars-for-sulfuric.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;optimization&quot;&gt;Optimization&lt;&#x2F;h2&gt;
&lt;p&gt;We tried several major optimization strategies:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;technicalfactorio&#x2F;comments&#x2F;svbupq&#x2F;how_to_make_a_fully_compressed_belt_via_inserter&#x2F;&quot;&gt;inserter clocking&lt;&#x2F;a&gt; on all ore smelters&#x2F;batteries&#x2F;red circuits&#x2F;steel&lt;&#x2F;li&gt;
&lt;li&gt;enabling &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;technicalfactorio&#x2F;comments&#x2F;mvn88v&#x2F;over_20_actually_30_performance_gain_by_using&#x2F;&quot;&gt;large pages on linux&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;inlining green chip production (i.e. less belts in favour of direct insertion)&lt;&#x2F;li&gt;
&lt;li&gt;max beaconing almost everywhere&lt;&#x2F;li&gt;
&lt;li&gt;reducing robo networks to only the essentials&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;and in general downscaling and optimizing flow:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;minimizing all builds (as close to zero inactive machines as possible)&lt;&#x2F;li&gt;
&lt;li&gt;reducing number of active inserters, belts, hops per item&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Beyond the linked posts, the following &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;technicalfactorio&quot;&gt;technicalfactorio subreddit&lt;&#x2F;a&gt; posts, and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;mulark.github.io&#x2F;test-index.html&quot;&gt;factorio benchmarks&lt;&#x2F;a&gt; were also helpful:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;technicalfactorio&#x2F;comments&#x2F;gels6c&#x2F;20k_spm_hybrid_megabase&#x2F;&quot;&gt;bot&#x2F;belt advice&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;factorio&#x2F;comments&#x2F;qcvfaq&#x2F;best_belt_ups_practices&#x2F;hhj3whl&#x2F;&quot;&gt;splitters + belt advice&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;mulark.github.io&#x2F;tests&#x2F;test-000101&#x2F;test-000101.html&quot;&gt;cars as chests benchmark&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=u-jswneg4YY&quot;&gt;inserter minimal train unloaders&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;mulark.github.io&#x2F;tests&#x2F;test-000030&#x2F;test-000030.html&quot;&gt;Trains waiting on &lt;code&gt;TIME PASSED &amp;amp;&amp;amp; Full&#x2F;Empty&lt;&#x2F;code&gt; condition is more efficient than just &lt;code&gt;Full&#x2F;Empty&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;mulark.github.io&#x2F;tests&#x2F;test-000201&#x2F;test-000201.html&quot;&gt;Minimizing number of bots so their usage is close to 100% is the best&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We did not go to the full-out &lt;strong&gt;direct insertion&lt;&#x2F;strong&gt; lengths that the most efficient bases go to where everything is inlined (because imo it ends up looking chaotic and huge, with lots of factories ending up idle a lot of the time), but it was truly fascinating to see the amount of rabbit holes you can go down here to optimize.&lt;&#x2F;p&gt;
&lt;p&gt;From the limited amount of testing I personally did. &lt;strong&gt;These helped&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;solid improvement by eliminating pollution (pre-measurements)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;~10%&lt;&#x2F;code&gt; improvement by using large pages&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;~10%&lt;&#x2F;code&gt; improvement by clocking all smelters&#x2F;batteries&#x2F;solid fuel&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;~10%&lt;&#x2F;code&gt; improvement by using clocked direct insertion steel and killing robo networks&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;~1%&lt;&#x2F;code&gt; improvement by disabling the 300+ cars&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;~0.5%&lt;&#x2F;code&gt; improvement by removing the standalone fishing base&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;~1%&lt;&#x2F;code&gt; improvement by cutting 6x7x4 inserters at science unloading stations&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;while these had &lt;strong&gt;no noticable improvements&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;refactoring circuit clocks to run of the same central clock&lt;&#x2F;li&gt;
&lt;li&gt;eliminating biters (mine are generally passive except for artillery revenge attacks)&lt;&#x2F;li&gt;
&lt;li&gt;eliminating grass&#x2F;trees&#x2F;fish&#x2F;cliffs&lt;&#x2F;li&gt;
&lt;li&gt;reducing visual quality of the game&lt;&#x2F;li&gt;
&lt;li&gt;prepending time passed conditions to trains&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;initial-measurements&quot;&gt;Initial Measurements&lt;&#x2F;h2&gt;
&lt;p&gt;When doing this set of measurements the base looked like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;base.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After all the optimizations above; we &lt;a href=&quot;&#x2F;imgs&#x2F;factorio&#x2F;time-nuclear.jpg&quot;&gt;measured&lt;&#x2F;a&gt; the following &lt;strong&gt;rough percentages of time&lt;&#x2F;strong&gt; of where the time was being spent in the game&#x27;s &lt;strong&gt;update loop&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Source&lt;&#x2F;th&gt;&lt;th&gt;Percent&lt;&#x2F;th&gt;&lt;th&gt;ms&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Entity update&lt;&#x2F;td&gt;&lt;td&gt;67%&lt;&#x2F;td&gt;&lt;td&gt;4.45ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Elecric network&lt;&#x2F;td&gt;&lt;td&gt;13%&lt;&#x2F;td&gt;&lt;td&gt;0.85ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Heat manager&lt;&#x2F;td&gt;&lt;td&gt;9%&lt;&#x2F;td&gt;&lt;td&gt;0.62ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Transport lines&lt;&#x2F;td&gt;&lt;td&gt;8%&lt;&#x2F;td&gt;&lt;td&gt;0.57ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Circuit network&lt;&#x2F;td&gt;&lt;td&gt;2%&lt;&#x2F;td&gt;&lt;td&gt;0.18ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Trains&lt;&#x2F;td&gt;&lt;td&gt;1%&lt;&#x2F;td&gt;&lt;td&gt;0.06ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;where the entities were &lt;a href=&quot;&#x2F;imgs&#x2F;factorio&#x2F;time-nuclear-entities.jpg&quot;&gt;broken down further&lt;&#x2F;a&gt; using &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.factorio.com&#x2F;Debug_mode&quot;&gt;&lt;code&gt;show-entity-time-usage&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Entity Class&lt;&#x2F;th&gt;&lt;th&gt;Percent&lt;&#x2F;th&gt;&lt;th&gt;ms&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.factorio.com&#x2F;Prototype&#x2F;Inserter&quot;&gt;Inserter&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;46%&lt;&#x2F;td&gt;&lt;td&gt;1.80ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.factorio.com&#x2F;Prototype&#x2F;Generator&quot;&gt;Generator&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;15%&lt;&#x2F;td&gt;&lt;td&gt;0.60ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.factorio.com&#x2F;Prototype&#x2F;Boiler&quot;&gt;Boiler&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;11%&lt;&#x2F;td&gt;&lt;td&gt;0.44ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.factorio.com&#x2F;Prototype&#x2F;Furnace&quot;&gt;Furnace&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;8%&lt;&#x2F;td&gt;&lt;td&gt;0.31ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.factorio.com&#x2F;Prototype&#x2F;AssemblingMachine&quot;&gt;Assembler&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;7%&lt;&#x2F;td&gt;&lt;td&gt;0.29ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.factorio.com&#x2F;Prototype&#x2F;MiningDrill&quot;&gt;Miners&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;5%&lt;&#x2F;td&gt;&lt;td&gt;0.19ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.factorio.com&#x2F;Prototype&#x2F;Lab&quot;&gt;Labs&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;1%&lt;&#x2F;td&gt;&lt;td&gt;0.04ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;which illustrates why inserter-clocking can be so effective - as it&#x27;s always such a big part of a factory - but it also highlights the next offender; &lt;strong&gt;nuclear&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Heat manager (heat exchangers) uses 9% of the update time&lt;&#x2F;li&gt;
&lt;li&gt;Generator + Boiler uses 26% of entity time (0.67=17% of the update time)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is actually a over a &lt;strong&gt;quarter of the time&lt;&#x2F;strong&gt;. Not what I had expected from a &lt;strong&gt;not-that-badly-designed&lt;&#x2F;strong&gt; nuclear setup (no steam storage, minimal exchanger network, optimal reactor efficiency bonuses). It&#x27;s a lot more than &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;factorio&#x2F;comments&#x2F;jtzdli&#x2F;some_notes_on_ups&#x2F;&quot;&gt;people publically estimate&lt;&#x2F;a&gt;, but to give them some credit, the percentage seen on my end would be amplified by already having optimized the hell out of all the inserters.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;We ran the base on two big nuclear reactors sites producing 33GW in total.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;nuclear.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
This reactor block gave us ~60% of the power output with &lt;strong&gt;120&lt;&#x2F;strong&gt; of the 204 total &lt;strong&gt;reactors&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Opening up the save in creative mode and ripping out nuclear in favour of an infinite energy interface bumped UPS from 150 to over 200.. how would that translate if we used nearly a million solar panels instead? how much space would that take? how much time would that take...&lt;&#x2F;p&gt;
&lt;h3 id=&quot;solar-project&quot;&gt;Solar Project&lt;&#x2F;h3&gt;
&lt;p&gt;Well, I had already sunk this much time into it, so thought I&#x27;d spend a weekend on it. How fun could it be?&lt;&#x2F;p&gt;
&lt;p&gt;Well, the answer is &lt;strong&gt;somewhat&lt;&#x2F;strong&gt;.. Provided you shut off the rest of the factory (so you can run 4-8x speed), and then run boost around with a bunch of rc&#x27;d spidertrons:&lt;&#x2F;p&gt;
&lt;div class=&quot;yv&quot;&gt;
    &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;zhiEGn-Yx-g&quot; title=&quot;Youtube&quot; class=&quot;yvi&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;with some strategic landfill factories taking advantage of huge mining prod:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;landfills.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Still, definitely a repetivite background task (that took two days..)&lt;&#x2F;p&gt;
&lt;p&gt;..but how did it measure up?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;On gamespeed &lt;code&gt;5&lt;&#x2F;code&gt; we saw a &lt;strong&gt;near 40% improvement&lt;&#x2F;strong&gt; to UPS from &lt;code&gt;150&lt;&#x2F;code&gt; to &lt;code&gt;208&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Breaking the new measurements (&lt;a href=&quot;&#x2F;imgs&#x2F;factorio&#x2F;time-solar.jpg&quot;&gt;1&lt;&#x2F;a&gt;, &lt;a href=&quot;&#x2F;imgs&#x2F;factorio&#x2F;time-solar-entities.jpg&quot;&gt;2&lt;&#x2F;a&gt;) down, we see:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Source&lt;&#x2F;th&gt;&lt;th&gt;Percent&lt;&#x2F;th&gt;&lt;th&gt;ms&lt;&#x2F;th&gt;&lt;th&gt;Change&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Entity update&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;71%&lt;&#x2F;td&gt;&lt;td&gt;3.12ms&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;-1.33ms&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Transport lines&lt;&#x2F;td&gt;&lt;td&gt;13%&lt;&#x2F;td&gt;&lt;td&gt;0.57ms&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Elecric network&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;11%&lt;&#x2F;td&gt;&lt;td&gt;0.48ms&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;-0.38ms&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Circuit network&lt;&#x2F;td&gt;&lt;td&gt;4%&lt;&#x2F;td&gt;&lt;td&gt;0.17ms&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Trains&lt;&#x2F;td&gt;&lt;td&gt;1%&lt;&#x2F;td&gt;&lt;td&gt;0.06ms&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Heat manager&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;0%&lt;&#x2F;td&gt;&lt;td&gt;0.00ms&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;-0.62ms&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;and looking into the entities:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Entity Class&lt;&#x2F;th&gt;&lt;th&gt;Percent&lt;&#x2F;th&gt;&lt;th&gt;ms&lt;&#x2F;th&gt;&lt;th&gt;Change&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.factorio.com&#x2F;Prototype&#x2F;Inserter&quot;&gt;Inserter&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;72%&lt;&#x2F;td&gt;&lt;td&gt;2.29ms&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;-0.49ms&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.factorio.com&#x2F;Prototype&#x2F;Furnace&quot;&gt;Furnace&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;11%&lt;&#x2F;td&gt;&lt;td&gt;0.35ms&lt;&#x2F;td&gt;&lt;td&gt;~0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.factorio.com&#x2F;Prototype&#x2F;AssemblingMachine&quot;&gt;Assembler&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;9%&lt;&#x2F;td&gt;&lt;td&gt;0.29ms&lt;&#x2F;td&gt;&lt;td&gt;~0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.factorio.com&#x2F;Prototype&#x2F;MiningDrill&quot;&gt;Miners&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;6%&lt;&#x2F;td&gt;&lt;td&gt;0.19ms&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.factorio.com&#x2F;Prototype&#x2F;Lab&quot;&gt;Labs&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;1%&lt;&#x2F;td&gt;&lt;td&gt;0.04ms&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.factorio.com&#x2F;Prototype&#x2F;Boiler&quot;&gt;Boiler&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;0%&lt;&#x2F;td&gt;&lt;td&gt;0.01ms&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;-0.43ms&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.factorio.com&#x2F;Prototype&#x2F;Generator&quot;&gt;Generator&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;0%&lt;&#x2F;td&gt;&lt;td&gt;0.00ms&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;-0.60ms&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;(There&#x27;s likely only precision to one decimal place here as we saw saw 0.04ms changes in furnace and assemblers despite having no actual changes in game. The numbers do have some variance on their own in the big base and we are just operating on screenshots.)&lt;&#x2F;p&gt;
&lt;p&gt;The update loop itself saw a nearly equivalent improvement with 6.24ms to 4.53ms.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;end-performance&quot;&gt;End Performance&lt;&#x2F;h3&gt;
&lt;p&gt;The UPS went from around &lt;code&gt;110&lt;&#x2F;code&gt; to &lt;code&gt;208&lt;&#x2F;code&gt; on average from redesigns, clocking and the mentioned tweaks, where a good chunk of this came from the base design itself. The &lt;strong&gt;most braindead change&lt;&#x2F;strong&gt; with the biggest improvement was switching to solar (with nearly 40% improvement at the time - your mileage will vary). The changes with the &lt;strong&gt;most performance gains by time investment&lt;&#x2F;strong&gt; was turning on large pages (5min job), and turning off + clearing pollution (1min job).&lt;&#x2F;p&gt;
&lt;p&gt;In the end, the island now looks like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;end-base.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
i.e. largely the same, but without nuclear, and solar everywhere.&lt;&#x2F;p&gt;
&lt;p&gt;how much solar? oh i&#x27;m sorry, that screenshot was cropped..&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;end-solar.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;yeah. that&#x27;s a lot more than expected. When designing solar, ensure you &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;forums.factorio.com&#x2F;viewtopic.php?t=5594&quot;&gt;overscale by 42%&lt;&#x2F;a&gt; to cover the night.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;blueprints&quot;&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;clux&#x2F;551835be6f2bf1f558cd661e03d2b64e&quot;&gt;Blueprints&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Exported these pieces:
&lt;img src=&quot;&#x2F;imgs&#x2F;factorio&#x2F;blueprints.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;commands&quot;&gt;Commands&lt;&#x2F;h3&gt;
&lt;details&gt;&lt;summary style=&quot;cursor:pointer&quot;&gt;&lt;b&gt;Expand Commands&lt;&#x2F;b&gt;&lt;&#x2F;summary&gt;
&lt;p&gt;
&lt;p&gt;One time commands:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.factorio.com&#x2F;Console#Remove_all_pollution&quot;&gt;remove pollution&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Set &lt;code&gt;&#x2F;c game.speed=5&lt;&#x2F;code&gt; to try to run as fast as possible&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Spawn resources:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lua&quot; class=&quot;language-lua z-code&quot;&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;z-source z-lua&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-lua&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-lua&quot;&gt;c&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;game&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;player&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;surface&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;&lt;span class=&quot;z-variable z-function z-lua&quot;&gt;create_entity&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-lua&quot;&gt;&lt;span class=&quot;z-meta z-group z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-lua&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-lua&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-lua&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-key z-lua&quot;&gt;name&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-lua&quot;&gt;=&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-lua&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-lua&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;crude-oil&lt;span class=&quot;z-punctuation z-definition z-string z-end z-lua&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-field z-lua&quot;&gt;,&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-lua&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-key z-lua&quot;&gt;amount&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-lua&quot;&gt;=&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-lua&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-lua&quot;&gt;10000000&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-field z-lua&quot;&gt;,&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-lua&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-key z-lua&quot;&gt;position&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-lua&quot;&gt;=&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-lua&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-lua&quot;&gt;{&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-lua&quot;&gt;game&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;player&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;position&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;x&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-field z-lua&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;game&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;player&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;position&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;y&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-lua&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-lua&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-lua&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Delete resources (of any kind) in a 10x10 square around you:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lua&quot; class=&quot;language-lua z-code&quot;&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;z-source z-lua&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-lua&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-lua&quot;&gt;c&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-lua&quot;&gt;local&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;surface&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-lua&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-lua&quot;&gt;game&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;player&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;surface&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-lua&quot;&gt;local&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;size&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-lua&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-lua&quot;&gt;10&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-lua&quot;&gt;local&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-lua&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-lua&quot;&gt;game&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;player&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;position&lt;&#x2F;span&gt;  &lt;span class=&quot;z-keyword z-control z-loop z-lua&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-lua&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;e&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-loop z-lua&quot;&gt;in&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-function z-builtin z-lua&quot;&gt;pairs&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-lua&quot;&gt;&lt;span class=&quot;z-meta z-group z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-lua&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-lua&quot;&gt;surface&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;&lt;span class=&quot;z-variable z-function z-lua&quot;&gt;find_entities_filtered&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-lua&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-lua&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-lua&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-key z-lua&quot;&gt;area&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-lua&quot;&gt;=&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-lua&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-lua&quot;&gt;{&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-lua&quot;&gt;{&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-lua&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;x&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-lua&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-lua&quot;&gt;size&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-field z-lua&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;y&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-lua&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-lua&quot;&gt;size&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-lua&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-field z-lua&quot;&gt;,&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-lua&quot;&gt;{&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-lua&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;x&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-lua&quot;&gt;+&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-lua&quot;&gt;size&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-field z-lua&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;y&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-lua&quot;&gt;+&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-lua&quot;&gt;size&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-lua&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-lua&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-field z-lua&quot;&gt;,&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-lua&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-key z-lua&quot;&gt;type&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-lua&quot;&gt;=&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-lua&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-lua&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;resource&lt;span class=&quot;z-punctuation z-definition z-string z-end z-lua&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-lua&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-lua&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;      &lt;span class=&quot;z-meta z-block z-lua&quot;&gt;&lt;span class=&quot;z-keyword z-control z-lua&quot;&gt;do&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;e&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;&lt;span class=&quot;z-variable z-function z-lua&quot;&gt;destroy&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-lua&quot;&gt;&lt;span class=&quot;z-meta z-group z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-lua&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-lua&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;  &lt;span class=&quot;z-keyword z-control z-end z-lua&quot;&gt;end&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Spawn a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;factorio&#x2F;comments&#x2F;4akydl&#x2F;how_to_generate_water_solved&#x2F;d55udah&#x2F;&quot;&gt;2x4 water pond&lt;&#x2F;a&gt; below you:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lua&quot; class=&quot;language-lua z-code&quot;&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;z-source z-lua&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-lua&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-lua&quot;&gt;c&lt;&#x2F;span&gt;
&lt;span class=&quot;z-storage z-modifier z-lua&quot;&gt;local&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;waterTiles&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-lua&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-lua&quot;&gt;{&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-lua&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-keyword z-control z-loop z-lua&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;y&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-lua&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-lua&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-lua&quot;&gt;,&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-lua&quot;&gt;4&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-lua&quot;&gt;&lt;span class=&quot;z-keyword z-control z-lua&quot;&gt;do&lt;&#x2F;span&gt;
 &lt;span class=&quot;z-keyword z-control z-loop z-lua&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;x&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-lua&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-lua&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-lua&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-lua&quot;&gt;,&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-lua&quot;&gt;2&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-lua&quot;&gt;&lt;span class=&quot;z-keyword z-control z-lua&quot;&gt;do&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-support z-constant z-builtin z-lua&quot;&gt;table&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-lua&quot;&gt;insert&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-lua&quot;&gt;&lt;span class=&quot;z-meta z-group z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-lua&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-lua&quot;&gt;waterTiles&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-lua&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-lua&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-lua&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-key z-lua&quot;&gt;name&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-lua&quot;&gt;=&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-lua&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-lua&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;water&lt;span class=&quot;z-punctuation z-definition z-string z-end z-lua&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-field z-lua&quot;&gt;,&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-lua&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-key z-lua&quot;&gt;position&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-lua&quot;&gt;=&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-lua&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-lua&quot;&gt;{&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-lua&quot;&gt;game&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;players&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brackets z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-lua&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-lua&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-lua&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;position&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;x&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-lua&quot;&gt;+&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-lua&quot;&gt;x&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-field z-lua&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;game&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;players&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brackets z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-lua&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-lua&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-lua&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;position&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;y&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-lua&quot;&gt;+&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-lua&quot;&gt;y&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-lua&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-lua&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-lua&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
 &lt;span class=&quot;z-keyword z-control z-end z-lua&quot;&gt;end&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
 &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;game&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;players&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brackets z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-lua&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-lua&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-lua&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;surface&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;&lt;span class=&quot;z-variable z-function z-lua&quot;&gt;set_tiles&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-lua&quot;&gt;&lt;span class=&quot;z-meta z-group z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-lua&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-lua&quot;&gt;waterTiles&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-lua&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-keyword z-control z-end z-lua&quot;&gt;end&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Disable cars (see the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;mulark.github.io&#x2F;tests&#x2F;test-000101&#x2F;test-000101.html&quot;&gt;cars as chests benchmark&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lua&quot; class=&quot;language-lua z-code&quot;&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;z-source z-lua&quot;&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-lua&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-lua&quot;&gt;c&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-loop z-lua&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-lua&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;ent&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-loop z-lua&quot;&gt;in&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-function z-builtin z-lua&quot;&gt;pairs&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-lua&quot;&gt;&lt;span class=&quot;z-meta z-group z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-lua&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-lua&quot;&gt;game&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;player&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;surface&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;&lt;span class=&quot;z-variable z-function z-lua&quot;&gt;find_entities_filtered&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-lua&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-lua&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-lua&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-key z-lua&quot;&gt;name&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-lua&quot;&gt;=&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-lua&quot;&gt; &lt;span class=&quot;z-string z-quoted z-double z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-lua&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;car&lt;span class=&quot;z-punctuation z-definition z-string z-end z-lua&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-lua&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-lua&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-lua&quot;&gt;&lt;span class=&quot;z-keyword z-control z-lua&quot;&gt;do&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;ent&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;active&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-lua&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-boolean z-true z-lua&quot;&gt;false&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-end z-lua&quot;&gt;end&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;large-pages&quot;&gt;Large pages&lt;&#x2F;h4&gt;
&lt;p&gt;Install &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;archlinux.org&#x2F;packages&#x2F;community&#x2F;x86_64&#x2F;mimalloc&#x2F;&quot;&gt;mimalloc&lt;&#x2F;a&gt; and set start command on factorio via steam:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;LD_PRELOAD=&#x2F;usr&#x2F;lib&#x2F;libmimalloc.so MIMALLOC_PAGE_RESET=0 MIMALLOC_LARGE_OS_PAGES=1 %command%
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Settings are documented via &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;sid.ethz.ch&#x2F;debian&#x2F;mimalloc&#x2F;mimalloc-2.0.1&#x2F;docs&#x2F;environment.html&quot;&gt;mi-alloc&lt;&#x2F;a&gt;. Large pages makes the most difference, but huge pages also works well.&lt;&#x2F;p&gt;
&lt;&#x2F;p&gt;
&lt;&#x2F;details&gt;
&lt;h2 id=&quot;results&quot;&gt;Results&lt;&#x2F;h2&gt;
&lt;p&gt;In the end, all the optimizations meant we could run the 5400 SPM base at 210 UPS on my machine (i.e. the game managed to run the game at 3.5x real speed on average). With 20% productivity modules in labs, and that game speed scale, we effectively research ~23k science per minute, or 1.4 million science per hour.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to view it interactively or play it, you can download or view &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;factoriobox.1au.us&#x2F;map&#x2F;info&#x2F;64a9a7e7a7c45dc3fc2c0ade02dee4c1d3eede36123460c3761a39d901587306&quot;&gt;full base&#x2F;save on factoriobox&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Baldur&#x27;s Gate: Multinomial Edition</title>
        <published>2022-04-12T00:00:00+00:00</published>
        <updated>2022-04-12T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://clux.github.io/probes.zola/baldurs-roll/" type="text/html"/>
        <id>https://clux.github.io/probes.zola/baldurs-roll/</id>
        
        <content type="html">&lt;p&gt;In a &lt;del&gt;brief&lt;&#x2F;del&gt; bout of escapism from the world and responsibilities, I booted up &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;store.steampowered.com&#x2F;app&#x2F;257350&#x2F;Baldurs_Gate_II_Enhanced_Edition&#x2F;&quot;&gt;Baldur&#x27;s Gate 2&lt;&#x2F;a&gt; with my brother. It&#x27;s an amazing game, once you have figured out how to &lt;strong&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;baldursgate&#x2F;search?q=roll&amp;amp;restrict_sr=on&quot;&gt;roll&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; your character.&lt;&#x2F;p&gt;
&lt;p&gt;For today&#x27;s installment; rather than telling you about the game, let&#x27;s talk about the &lt;strong&gt;maths&lt;&#x2F;strong&gt; behind rolling a &lt;code&gt;2e&lt;&#x2F;code&gt; character for &lt;code&gt;BG2&lt;&#x2F;code&gt;, and then running simulations with weird &lt;code&gt;X&lt;&#x2F;code&gt;-based linux tools.&lt;&#x2F;p&gt;
&lt;!--more--&gt;
&lt;script src=&quot;https:&#x2F;&#x2F;cdn.plot.ly&#x2F;plotly-2.9.0.min.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;h2 id=&quot;rolling-a-character&quot;&gt;Rolling a character&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;BG2&lt;&#x2F;code&gt; character generation mechanics is almost entirely based on the rules from &lt;code&gt;AD&amp;amp;D 2e&lt;&#x2F;code&gt;. You get &lt;code&gt;6&lt;&#x2F;code&gt; ability scores, and each ability score is rolled as the sum of &lt;code&gt;3d6&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Probablistically; this &lt;strong&gt;should&lt;&#x2F;strong&gt; give you a character with an expected &lt;code&gt;63&lt;&#x2F;code&gt; total ability points (as a result of rolling &lt;code&gt;18d6&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Mechanically, you are in this screen:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;bg&#x2F;rolling.png&quot; alt=&quot;bg2 stat rolling screen&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;...and they have given you a &lt;code&gt;reroll&lt;&#x2F;code&gt; button.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s a strange design idea to port the rolling mechanics from &lt;code&gt;d&amp;amp;d&lt;&#x2F;code&gt; into this game. In a normal campaign you&#x27;d usually get one chance rolling, but here, there&#x27;s no downside to keeping going; encouraging excessive time investment (the irony in writing a blog post on this is not lost on me). &lt;small&gt;The character creation in BG2 would probably have been less perfection focused if they&#x27;d gone for something like &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;chicken-dinner.com&#x2F;5e&#x2F;5e-point-buy.html&quot;&gt;5e point buy&lt;&#x2F;a&gt;.&lt;&#x2F;small&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, &lt;strong&gt;suppose&lt;&#x2F;strong&gt; you want learn how to automate this, or you just want to think about combinatorics, multinomials, and weird &lt;code&gt;X&lt;&#x2F;code&gt; tools for a while, then this is the right place. You will also figure out &lt;strong&gt;how long it&#x27;s expected to take&lt;&#x2F;strong&gt; to roll high.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;HINT: ..it&#x27;s less time than it took to write this blogpost&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;&#x2F;h2&gt;
&lt;p&gt;Using the script used herein to achieve higher rolls than you have patience for, is on some level; cheating. That said, it&#x27;s a fairly pointless effort:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;this is an &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Baldur%27s_Gate_II:_Shadows_of_Amn&quot;&gt;old&lt;&#x2F;a&gt;, unranked rpg with difficulty settings&lt;&#x2F;li&gt;
&lt;li&gt;having &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tvtropes.org&#x2F;pmwiki&#x2F;pmwiki.php&#x2F;Main&#x2F;DumpStat&quot;&gt;dump stats&lt;&#x2F;a&gt; is not heavily penalized in the game&lt;&#x2F;li&gt;
&lt;li&gt;early items nullify effects of common dump stats (&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;baldursgate.fandom.com&#x2F;wiki&#x2F;Girdle_of_Hill_Giant_Strength&quot;&gt;19 STR girdle&lt;&#x2F;a&gt; or &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;baldursgate.fandom.com&#x2F;wiki&#x2F;Ring_of_Human_Influence&quot;&gt;18 CHA ring&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;you can get &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=5dDmh98lmkA&quot;&gt;max stats in 20 minutes&lt;&#x2F;a&gt; with by abusing inventory+stat &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;baldursgate.fandom.com&#x2F;wiki&#x2F;Exploits#Potion_Swap_Glitch&quot;&gt;underflow&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;some &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;baldursgate.fandom.com&#x2F;wiki&#x2F;Edwin_Odesseiron&quot;&gt;NPCS&lt;&#x2F;a&gt; come with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;baldursgate.fandom.com&#x2F;wiki&#x2F;Edwin%27s_Amulet&quot;&gt;gear&lt;&#x2F;a&gt; that blows &lt;strong&gt;marginally better stats&lt;&#x2F;strong&gt; out of the water&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So assuming you have a reason to be here despite this; let&#x27;s dive in to some maths.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;multinomials-and-probabilities&quot;&gt;Multinomials and probabilities&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;How likely are you to get a 90&#x2F;95&#x2F;100?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The sum of rolling 18 six-sided dice follows an easier variant of the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Multinomial_distribution&quot;&gt;multinomial distribution&lt;&#x2F;a&gt; where we have equal event probabilities. We are going to follow the &lt;em&gt;simpler&lt;&#x2F;em&gt; multinomial expansion from &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;mathworld.wolfram.com&#x2F;Dice.html&quot;&gt;mathworld&#x2F;Dice&lt;&#x2F;a&gt; for &lt;code&gt;s=6&lt;&#x2F;code&gt; and &lt;code&gt;n=18&lt;&#x2F;code&gt; and find $P(x, 18, 6)$ which we will denote as $P(X = x)$; the chance of rolling a sum equal to $x$:&lt;&#x2F;p&gt;
&lt;p&gt;$$P(X = x) = \frac{1}{6^{18}} \sum_{k=0}^{\lfloor(x-18)&#x2F;6\rfloor} (-1)^k \binom{18}{k} \binom{x-6k-1}{17}$$
$$ = \sum_{k=0}^{\lfloor(x-18)&#x2F;6\rfloor} (-1)^k \frac{18}{k!(18-k)!} \frac{(x-6k-1)!}{(x-6k-18)!}$$&lt;&#x2F;p&gt;
&lt;p&gt;If we were to expand this expression, we would get 15 different expressions depending on how big of an $x$ you want to determine. So rather than trying to reduce this to a polynomial expression over $p$, we will &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.wolframalpha.com&#x2F;input?i2d=true&amp;amp;i=+Divide%5B1%2CPower%5B6%2C18%5D%5DSum%5BPower%5B%5C%2840%29-1%5C%2841%29%2Ck%5D+*binomial%5C%2840%2918%5C%2844%29+k%5C%2841%29*binomial%5C%2840%2991-6k-1%5C%2844%29+17%5C%2841%29%2C%7Bk%2C0%2Cfloor%5C%2840%29Divide%5B%5C%2840%2991-18%5C%2841%29%2C6%5D%5C%2841%29%7D%5D&quot;&gt;paste values into wolfram alpha&lt;&#x2F;a&gt; and tabulate for $[18, \ldots, 108]$.&lt;&#x2F;p&gt;
&lt;p&gt;You can see the &lt;a href=&quot;#appendix&quot;&gt;appendix&lt;&#x2F;a&gt; for the numbers. Here we will just plot the values:&lt;&#x2F;p&gt;
&lt;div id=&quot;probhist&quot; style=&quot;width:600px;height:450px;&quot;&gt;&lt;&#x2F;div&gt;
&lt;script&gt;
&#x2F;&#x2F; keys [18, 108]
var ALL_X = [...Array(109).keys()].slice(18);

&#x2F;&#x2F; probabilities for p=18 up to p=108 (sums to 0.9999999999999999 \o&#x2F;)
var MAIN_PROBS = [1&#x2F;101559956668416, 1&#x2F;5642219814912, 19&#x2F;11284439629824, 95&#x2F;8463329722368, 665&#x2F;11284439629824, 1463&#x2F;5642219814912, 33643&#x2F;33853318889472, 9605&#x2F;2821109907456, 119833&#x2F;11284439629824, 1552015&#x2F;50779978334208, 308465&#x2F;3761479876608, 97223&#x2F;470184984576, 2782169&#x2F;5642219814912, 1051229&#x2F;940369969152, 4550747&#x2F;1880739938304, 786505&#x2F;156728328192, 37624655&#x2F;3761479876608, 36131483&#x2F;1880739938304, 1206294965&#x2F;33853318889472, 20045551&#x2F;313456656384, 139474379&#x2F;1253826625536, 1059736685&#x2F;5642219814912, 128825225&#x2F;417942208512, 17143871&#x2F;34828517376, 8640663457&#x2F;11284439629824, 728073331&#x2F;626913312768, 2155134523&#x2F;1253826625536, 3942228889&#x2F;1586874322944, 4949217565&#x2F;1410554953728, 3417441745&#x2F;705277476864, 27703245169&#x2F;4231664861184, 3052981465&#x2F;352638738432, 126513483013&#x2F;11284439629824, 240741263447&#x2F;16926659444736, 199524184055&#x2F;11284439629824, 60788736553&#x2F;2821109907456, 2615090074301&#x2F;101559956668416, 56759069113&#x2F;1880739938304, 130521904423&#x2F;3761479876608, 110438453753&#x2F;2821109907456, 163027882055&#x2F;3761479876608, 88576807769&#x2F;1880739938304, 566880747559&#x2F;11284439629824, 24732579319&#x2F;470184984576, 101698030955&#x2F;1880739938304, 461867856157&#x2F;8463329722368, 101698030955&#x2F;1880739938304, 24732579319&#x2F;470184984576, 566880747559&#x2F;11284439629824, 88576807769&#x2F;1880739938304, 163027882055&#x2F;3761479876608, 110438453753&#x2F;2821109907456, 130521904423&#x2F;3761479876608, 56759069113&#x2F;1880739938304, 2615090074301&#x2F;101559956668416, 60788736553&#x2F;2821109907456, 199524184055&#x2F;11284439629824, 240741263447&#x2F;16926659444736, 126513483013&#x2F;11284439629824, 3052981465&#x2F;352638738432, 27703245169&#x2F;4231664861184, 3417441745&#x2F;705277476864, 4949217565&#x2F;1410554953728, 3942228889&#x2F;1586874322944, 2155134523&#x2F;1253826625536, 728073331&#x2F;626913312768, 8640663457&#x2F;11284439629824, 17143871&#x2F;34828517376, 128825225&#x2F;417942208512, 1059736685&#x2F;5642219814912, 139474379&#x2F;1253826625536, 20045551&#x2F;313456656384, 1206294965&#x2F;33853318889472, 36131483&#x2F;1880739938304, 37624655&#x2F;3761479876608, 786505&#x2F;156728328192, 4550747&#x2F;1880739938304, 1051229&#x2F;940369969152, 2782169&#x2F;5642219814912, 97223&#x2F;470184984576, 308465&#x2F;3761479876608, 1552015&#x2F;50779978334208, 119833&#x2F;11284439629824, 9605&#x2F;2821109907456, 33643&#x2F;33853318889472, 1463&#x2F;5642219814912, 665&#x2F;11284439629824, 95&#x2F;8463329722368, 19&#x2F;11284439629824, 1&#x2F;5642219814912, 1&#x2F;101559956668416];

var MAIN_LEGEND = MAIN_PROBS.map(x =&gt; &quot;expected once in &quot; + Intl.NumberFormat().format(Math.floor(1&#x2F;x)) + &quot; rolls&quot;)

var trace = {
  x: ALL_X,
  y: MAIN_PROBS,
  name: &#x27;probability&#x27;,
  text: MAIN_LEGEND,
  opacity: 0.8,
  type: &quot;scatter&quot;,
};


var data = [trace];
var layout = {
  title: &quot;Distribution for the sum of 18d6 dice rolls&quot;,
  xaxis: {title: &quot;Roll&quot;},
  yaxis: {title: &quot;Probability&quot;},
};
Plotly.newPlot(document.getElementById(&#x27;probhist&#x27;), data, layout);

&#x2F;&#x2F; extra: precise expectation and variance
var expectation_orig = MAIN_PROBS.map((x,i) =&gt; (i+18)*x).reduce((acc, e) =&gt; acc+e, 0);
var variance_orig = MAIN_PROBS.map((x,i) =&gt; Math.pow(i+18 - expectation_orig, 2)*x).reduce((acc, e) =&gt; acc+e, 0);
console.log(&quot;Precise Expectation and variance for 18d6&quot;, expectation_orig, variance_orig);
&lt;&#x2F;script&gt;
&lt;p&gt;and with the precise distribution we can also calculation expectation and variance:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$E(X) = 63$&lt;&#x2F;li&gt;
&lt;li&gt;$Var(X) = 52.5 \thickapprox 7.24^2$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is how things &lt;strong&gt;should&lt;&#x2F;strong&gt; look on paper. From the chart you can extract:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;108&lt;&#x2F;code&gt; would be a once in &lt;code&gt;101 trillion&lt;&#x2F;code&gt; ($6^{18}$) event&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;107&lt;&#x2F;code&gt; would be a once in &lt;code&gt;5 trillion&lt;&#x2F;code&gt; event (&lt;code&gt;6^18&#x2F;18&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;106&lt;&#x2F;code&gt; would be a once in &lt;code&gt;600 billion&lt;&#x2F;code&gt; event (5s in two places, or 4 in one place)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;105&lt;&#x2F;code&gt; would be a once in &lt;code&gt;90 billion&lt;&#x2F;code&gt; event (3x5s, or 1x4 and 1x5, or 1x3)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;104&lt;&#x2F;code&gt; would be a once in &lt;code&gt;16 billion&lt;&#x2F;code&gt; event (4x5s, 2x5s and 1x4, 2x4s, 1x5 and 1x3, 1x2)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;103&lt;&#x2F;code&gt; would be a once in &lt;code&gt;4 billion&lt;&#x2F;code&gt; event (...)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;102&lt;&#x2F;code&gt; would be a once in &lt;code&gt;1 billion&lt;&#x2F;code&gt; event&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;101&lt;&#x2F;code&gt; would be a once in &lt;code&gt;290 million&lt;&#x2F;code&gt; event&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;100&lt;&#x2F;code&gt; would be a once in &lt;code&gt;94 million&lt;&#x2F;code&gt; event&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;99&lt;&#x2F;code&gt; would be a once in &lt;code&gt;32 million&lt;&#x2F;code&gt; event&lt;&#x2F;li&gt;
&lt;li&gt;$\ldots$&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;95&lt;&#x2F;code&gt; would be a once in &lt;code&gt;900k&lt;&#x2F;code&gt; event (first number with prob &amp;lt; 1 in a million)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;But is this really right for BG?&lt;&#x2F;strong&gt; A &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;baldursgate&#x2F;comments&#x2F;svnyy5&#x2F;this_is_why_i_let_my_gf_roll_my_stats_lol&#x2F;hxhde5k&#x2F;&quot;&gt;lot&lt;&#x2F;a&gt; of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;baldursgate&#x2F;comments&#x2F;tak2m7&#x2F;say_hello_to_my_archer_roll&#x2F;&quot;&gt;people&lt;&#x2F;a&gt; have &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;baldursgate&#x2F;comments&#x2F;rjnw22&#x2F;less_than_a_minute_of_rolling_this_is_my_alltime&#x2F;&quot;&gt;all&lt;&#x2F;a&gt; rolled nineties in just a few hundred rolls, and many even getting &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;baldursgate&#x2F;comments&#x2F;phr68a&#x2F;my_new_highest_roll_10049_elf_mclovin_fightermage&#x2F;&quot;&gt;100&lt;&#x2F;a&gt; or &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;baldursgate&#x2F;comments&#x2F;sq54wo&#x2F;how_high_can_you_roll&#x2F;&quot;&gt;more&lt;&#x2F;a&gt;..was that extreme luck, or are higher numbers more likely than what this distribution says?&lt;&#x2F;p&gt;
&lt;p&gt;Well, let&#x27;s start with the obvious:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The distribution is &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Censoring_(statistics)&quot;&gt;censored&lt;&#x2F;a&gt;. We don&#x27;t see the rolls below $75$.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;div id=&quot;probhist2&quot; style=&quot;width:600px;height:450px;&quot;&gt;&lt;&#x2F;div&gt;
&lt;script&gt;
var data = [{
  x: ALL_X,
  y: MAIN_PROBS,
  name: &#x27;probability&#x27;,
  text: MAIN_LEGEND,
  opacity: 0.8,
  type: &quot;scatter&quot;,
}];
var layout = {
  annotations: [
   {
     y: 1&#x2F;70,
     x: 75,
     xref: &#x27;x&#x27;,
     yref: &#x27;y&#x27;,
     text: &#x27;cutoff&#x27;,
     showarrow: true,
     arrowhead: 7,
     arrowcolor: &quot;blue&quot;,
     ax: 0,
     ay: -40
   },
  ],
  xaxis: {title: &quot;Roll&quot;},
  yaxis: {title: &quot;Probability&quot;},
};
Plotly.newPlot(document.getElementById(&#x27;probhist2&#x27;), data, layout);
&lt;&#x2F;script&gt;
&lt;p&gt;What&#x27;s &lt;strong&gt;left of this cutoff&lt;&#x2F;strong&gt; actually accounts for around &lt;code&gt;94%&lt;&#x2F;code&gt; of the distribution. &lt;strong&gt;If&lt;&#x2F;strong&gt; the game &lt;strong&gt;did not do this&lt;&#x2F;strong&gt;, you&#x27;d be as likely getting &lt;code&gt;36&lt;&#x2F;code&gt; as a &lt;code&gt;90&lt;&#x2F;code&gt;. We are effectively throwing away &amp;quot;19 bad rolls&amp;quot; on every roll.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;AD&amp;amp;D 2e&lt;&#x2F;code&gt; had its &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;advanced-dungeons-dragons-2nd-edition.fandom.com&#x2F;wiki&#x2F;Rolling_Ability_Scores&quot;&gt;own ways to tilt the distribution&lt;&#x2F;a&gt; in a way that resulted in more powerful characters.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;How such a truncation or censoring is performed is at the mercy of the BG engine. We will &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Rectified_Gaussian_distribution&quot;&gt;rectify&lt;&#x2F;a&gt; the distribution by &lt;strong&gt;scaling up&lt;&#x2F;strong&gt; the truncated version of our distribution, and show that this is correct later.&lt;&#x2F;p&gt;
&lt;div id=&quot;probhist3&quot; style=&quot;width:600px;height:450px;&quot;&gt;&lt;&#x2F;div&gt;
&lt;script&gt;
var prob_over_74 = MAIN_PROBS.slice(75-18).reduce((acc, e) =&gt; acc + e, 0);
var SCALED_PROBS = MAIN_PROBS.slice(75-18).map(x =&gt; x &#x2F; prob_over_74); &#x2F;&#x2F; scale up by whats left

var scaled_legend = SCALED_PROBS.map(x =&gt; &quot;expected once in &quot; + Intl.NumberFormat().format(Math.floor(1&#x2F;x)) + &quot; rolls&quot;);

&#x2F;&#x2F;console.log(&quot;probability of rolling gte 75&quot;, prob_over_74);
&#x2F;&#x2F;console.log(SCALED_PROBS.reduce((acc, e) =&gt; acc + e, 0)); &#x2F;&#x2F; 1!
var trace = {
  x: ALL_X.slice(75-18),
  y: SCALED_PROBS,
  name: &#x27;probability&#x27;,
  text: scaled_legend,
  opacity: 0.8,
  type: &quot;scatter&quot;,
};

var data = [trace];
var layout = {
  title: &quot;Scaled Distribution&quot;,
  xaxis: {title: &quot;Roll&quot;},
  yaxis: {title: &quot;Probability&quot;},
};
Plotly.newPlot(document.getElementById(&#x27;probhist3&#x27;), data, layout);

&#x2F;&#x2F; extra: precise expectation and variance
var expectation_trunc = SCALED_PROBS.map((x,i) =&gt; (i+75)*x).reduce((acc, e) =&gt; acc+e, 0);
var variance_trunc = SCALED_PROBS.map((x,i) =&gt; Math.pow(i+75 - expectation_trunc, 2)*x).reduce((acc, e) =&gt; acc+e, 0);
console.log(&quot;Precise Truncated Expectation and variance for 18d6&quot;, expectation_trunc, variance_trunc);

&lt;&#x2F;script&gt;
&lt;p&gt;Here we have divided by the sum of the probabilities of the right hand side of the graph $P(X \ge 75)$ to get the new probability sum to &lt;code&gt;1&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Using this scaled data, we can get precise, truncated distribution parameters:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$E(X_T) = 77.525$&lt;&#x2F;li&gt;
&lt;li&gt;$Var(X_T) = 2.61^2$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This &lt;em&gt;censored 18d6 multinomial distribution&lt;&#x2F;em&gt; is actually very close for certain cases, and we will &lt;strong&gt;demonstrate&lt;&#x2F;strong&gt; this.&lt;&#x2F;p&gt;
&lt;p&gt;But first, we are going to need to press the &lt;code&gt;reroll&lt;&#x2F;code&gt; button a lot...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;automating-rolling&quot;&gt;Automating Rolling&lt;&#x2F;h2&gt;
&lt;p&gt;The simulation script &#x2F; hacks we made is &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Thhethssmuz&#x2F;bg2ee-stat-roll&quot;&gt;found here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tools&quot;&gt;Tools&lt;&#x2F;h3&gt;
&lt;p&gt;We are playing on &lt;strong&gt;Linux&lt;&#x2F;strong&gt; with &lt;code&gt;X&lt;&#x2F;code&gt; and some obscure associated tooling:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scrot&lt;&#x2F;code&gt; - X screenshot utility&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;xdotool&lt;&#x2F;code&gt; - X CLI automation tool&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;xwininfo&lt;&#x2F;code&gt; - X window information utility&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Basic strategy;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;find out where buttons are with &lt;code&gt;xwininfo&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;press the &lt;code&gt;reroll&lt;&#x2F;code&gt; button with &lt;code&gt;xdotool&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;take screenshot of the &lt;code&gt;total&lt;&#x2F;code&gt; number with &lt;code&gt;scrot&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;compare screenshot to previous rolls&lt;&#x2F;li&gt;
&lt;li&gt;press &lt;code&gt;store&lt;&#x2F;code&gt; when a new maximum is found&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The script also does some extra stuff to determine the strength roll, but that&#x27;s not relevant here.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;initialization&quot;&gt;Initialization&lt;&#x2F;h3&gt;
&lt;p&gt;To standardise what we are taking screenshots of, we need a consistent frame of reference.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;xwininfo&lt;&#x2F;code&gt; will give us the &lt;code&gt;x,y&lt;&#x2F;code&gt; coordinates of the top left corner of the game window, and then hard-code the offsets from that because the game has a consistent layout. There is &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Thhethssmuz&#x2F;bg2ee-stat-roll&#x2F;blob&#x2F;5a023de83c468224aa999b5b3c60f224aae76b97&#x2F;roll.sh#L20-L84&quot;&gt;some complexity&lt;&#x2F;a&gt; in doing this, but it has so far worked well.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Caveat&lt;&#x2F;strong&gt;: You need to have &lt;strong&gt;scaled the window&lt;&#x2F;strong&gt; to size &amp;gt;= 1024x768 to avoid UI downscaling.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The standardised approach also helps with dealing with rolls, and it let us populate a roll-table quickly.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;roll-tables&quot;&gt;Roll Tables&lt;&#x2F;h3&gt;
&lt;p&gt;Taking screenshots is pretty easy. Use &lt;code&gt;scrot&lt;&#x2F;code&gt; at an &lt;code&gt;x,y&lt;&#x2F;code&gt; coordinate followed by lenghts; &lt;code&gt;,width,height&lt;&#x2F;code&gt; as remaining arguments defining the square to screenshot:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;scrot&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;a&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-parameter z-begin z-shell&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;STR_TOP_LEFT_X&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-parameter z-end z-shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-parameter z-begin z-shell&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;STR_TOP_LEFT_Y&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-parameter z-end z-shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,49,17&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; -&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;the output of this can be piped to a &lt;code&gt;.png&lt;&#x2F;code&gt; and passed to &lt;code&gt;compare&lt;&#x2F;code&gt; (part of &lt;code&gt;imagemagick&lt;&#x2F;code&gt; package), to compare values based on thresholds. However, this idea is actually overkill..&lt;&#x2F;p&gt;
&lt;p&gt;The menu background is &lt;strong&gt;static&lt;&#x2F;strong&gt; and the resulting screenshots are actually &lt;strong&gt;completely deterministic per value&lt;&#x2F;strong&gt;, so we can instead just compare them by their hashes in one big &lt;code&gt;switch&lt;&#x2F;code&gt; (i.e. after piping to &lt;code&gt;md5&lt;&#x2F;code&gt;) and use that as our &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Thhethssmuz&#x2F;bg2ee-stat-roll&#x2F;blob&#x2F;5a023de83c468224aa999b5b3c60f224aae76b97&#x2F;roll.sh#L130-L159&quot;&gt;roll table&lt;&#x2F;a&gt;, Excerpt:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;    &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;d74939b47327e4f2c1b781d64e2ab28d*&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;) &lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;CURRENT_ROLL&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;90&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;ca49ce8b4c9c0f814dab24668f7313fe*&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;) &lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;CURRENT_ROLL&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;91&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;3e6f8127ac0634bb1fc20acf40c95c48*&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;) &lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;CURRENT_ROLL&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;92&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;7f849edd84a4be895f5c58b4f5b20d4e*&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;) &lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;CURRENT_ROLL&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;93&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;b8f90179e2a0e975fc2647bc7439d9c6*&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;) &lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;CURRENT_ROLL&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;94&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;b1d3b73de16d750b265f5c63000ccd54*&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;) &lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;CURRENT_ROLL&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;95&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;87413f7310bd06b0b66fb4d2e61c5c7a*&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;) &lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;CURRENT_ROLL&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;96&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;b489ad2a17456f8eebe843e4b7e3e685*&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;) &lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;CURRENT_ROLL&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;97&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;25112e67464791f24f9e2e99d38ef9d7*&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;) &lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;CURRENT_ROLL&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;98&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;9c3720b9d3ab1d7f0d11dfb9771a1aef*&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;) &lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;CURRENT_ROLL&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;99&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;3ef9bf6cd4d9946d89765870e5b21566*&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;) &lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;CURRENT_ROLL&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;100&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;clicking&quot;&gt;Clicking&lt;&#x2F;h2&gt;
&lt;p&gt;Automating a click is simply:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;xdotool&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; mousemove &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;REROLL_BTN_X&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;REROLL_BTN_Y&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; click&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;delay&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-option z-shell&quot;&gt;=&lt;&#x2F;span&gt;0 1&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where the &lt;code&gt;--delay=0&lt;&#x2F;code&gt; overrides a builtin delay between clicks.&lt;&#x2F;p&gt;
&lt;p&gt;The only complication here is that BG performs &lt;strong&gt;internal buffering&lt;&#x2F;strong&gt; of clicks, so this allows us to blast through numbers faster than the screen can display them. This means we have to compensate with a &lt;code&gt;sleep 0.001&lt;&#x2F;code&gt; after clicking to ensure we can grab the &lt;code&gt;scrot&lt;&#x2F;code&gt; of the roll before another click is registered.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;showcase&quot;&gt;Showcase&lt;&#x2F;h2&gt;
&lt;p&gt;Running the script (with a terminal showing the script output overlayed) looks like this:&lt;&#x2F;p&gt;
&lt;div class=&quot;yv&quot;&gt;
    &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;849xInj3GmI&quot; title=&quot;Youtube&quot; class=&quot;yvi&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;On my machine, we get just over &lt;strong&gt;15 rolls per second&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sampling&quot;&gt;Sampling&lt;&#x2F;h2&gt;
&lt;p&gt;We rolled a human &lt;code&gt;fighter&lt;&#x2F;code&gt;, &lt;code&gt;paladin&lt;&#x2F;code&gt;, and a &lt;code&gt;ranger&lt;&#x2F;code&gt; overnight with roughly half a million rolls each (see &lt;a href=&quot;#appendix&quot;&gt;appendix&lt;&#x2F;a&gt;), and we got these values:&lt;&#x2F;p&gt;
&lt;div id=&quot;rollhist&quot; style=&quot;width:600px;height:450px;&quot;&gt;&lt;&#x2F;div&gt;
&lt;script&gt;
&#x2F;&#x2F; keys [75, 108]
var x = [...Array(109).keys()].slice(75);

&#x2F;&#x2F; number of samples per class
var samples = {
  &#x2F;&#x2F;  fighter (75 -&gt; 98)
  &quot;fighter&quot;: [137379, 109198, 85620, 65004, 48256, 35041, 24987, 17545, 11981, 7883, 5007, 3139, 1946, 1138, 670, 368, 199, 103, 49, 26, 12, 6, 2, 1],
  &#x2F;&#x2F; paladin (75 -&gt; 102)
  &quot;paladin&quot;: [50888, 54911, 57338, 57442, 55589, 52357, 47503, 41339, 34458, 28599, 21997, 16722, 12322, 8697, 5997, 3774, 2371, 1489, 822, 465, 251, 129, 56, 24, 12, 4, 1, 1],

  &#x2F;&#x2F; ranger (75 -&gt; 100)
  &quot;ranger&quot;: [32296, 37790, 43118, 46609, 48108, 47589, 45774, 41963, 36876, 30973, 25272, 19904, 14730, 10430, 7285, 4667, 2991, 1696, 986, 529, 254, 121, 56, 26, 10, 1],
};

var trace_observations = function(klss) {
  var sample_klss = samples[klss];
  let num_samples = sample_klss.reduce((acc, e) =&gt; acc+e, 0);
  var observed_probs = sample_klss.map(x =&gt; x &#x2F; num_samples);

  &#x2F;&#x2F; TODO: estimate expecation and variance here?
  return {
    x: x,
    y: observed_probs,
    name: &#x27;observed &#x27; + klss,
    text: observed_probs.map(x =&gt; &quot;occurred once in &quot; + Math.floor(1&#x2F;x) + &quot; rolls&quot;),
    opacity: 0.8,
    type: &quot;scatter&quot;,
  };
};

var trace_obs_fighter = trace_observations(&#x27;fighter&#x27;);
var trace_obs_paladin = trace_observations(&#x27;paladin&#x27;);
var trace_obs_ranger = trace_observations(&#x27;ranger&#x27;);

var data = [trace_obs_fighter, trace_obs_paladin, trace_obs_ranger];
var layout = {
  title: &quot;Roll Results&quot;,
  xaxis: {title: &quot;Roll&quot;},
  yaxis: {title: &quot;Observed probability&quot;},
};
Plotly.newPlot(document.getElementById(&#x27;rollhist&#x27;), data, layout);
&lt;&#x2F;script&gt;
&lt;p&gt;Let&#x27;s start with the &lt;strong&gt;fighter&lt;&#x2F;strong&gt;. If we compare the fighter graph with our precise, censored multinomial distribution, they are &lt;strong&gt;very close&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;div id=&quot;probhist4&quot; style=&quot;width:600px;height:450px;&quot;&gt;&lt;&#x2F;div&gt;
&lt;script&gt;
var prob_over_74 = MAIN_PROBS.slice(75-18).reduce((acc, e) =&gt; acc + e, 0);
var SCALED_PROBS = MAIN_PROBS.slice(75-18).map(x =&gt; x &#x2F; prob_over_74); &#x2F;&#x2F; scale up by whats left

var scaled_legend = SCALED_PROBS.map(x =&gt; &quot;expected once in &quot; + Intl.NumberFormat().format(Math.floor(1&#x2F;x)) + &quot; rolls&quot;);

let trace_single_trunc = {
  x: ALL_X.slice(75-18),
  y: SCALED_PROBS,
  name: &#x27;fighter multinomial 18d6&#x27;,
  text: scaled_legend,
  opacity: 0.8,
  type: &quot;scatter&quot;,
};

var data = [trace_single_trunc, trace_obs_fighter];
var layout = {
  title: &quot;Distribution vs. Observed Fighter&quot;,
  xaxis: {title: &quot;Roll&quot;},
  yaxis: {title: &quot;Probability&quot;},
};
Plotly.newPlot(document.getElementById(&#x27;probhist4&#x27;), data, layout);
&lt;&#x2F;script&gt;
&lt;p&gt;So for &lt;strong&gt;fighters&lt;&#x2F;strong&gt;, we can be pretty happy with the calculations we have done, and can use the precise probabilities as a guide.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;How long would it take you to achieve &amp;gt;95 for a fighter using the script?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;108&lt;&#x2F;code&gt; is a once in &lt;code&gt;5 trillion&lt;&#x2F;code&gt; event (10,000 years)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;107&lt;&#x2F;code&gt; is a once in &lt;code&gt;300 billion&lt;&#x2F;code&gt; event (600 years)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;106&lt;&#x2F;code&gt; is a once in &lt;code&gt;33 billion&lt;&#x2F;code&gt; event (69 years)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;105&lt;&#x2F;code&gt; is a once in &lt;code&gt;5 billion&lt;&#x2F;code&gt; event (10 years)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;104&lt;&#x2F;code&gt; is a once in &lt;code&gt;900 million&lt;&#x2F;code&gt; event (2 years)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;103&lt;&#x2F;code&gt; is a once in &lt;code&gt;200 million&lt;&#x2F;code&gt; event (5 months)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;102&lt;&#x2F;code&gt; is a once in &lt;code&gt;50 million&lt;&#x2F;code&gt; event (5 weeks)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;101&lt;&#x2F;code&gt; is a once in &lt;code&gt;16 million&lt;&#x2F;code&gt; event (2 weeks)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;100&lt;&#x2F;code&gt; is a once in &lt;code&gt;5 million&lt;&#x2F;code&gt; event (4 days)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;99&lt;&#x2F;code&gt; is a once in &lt;code&gt;2 million&lt;&#x2F;code&gt; event (1.5 day)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;98&lt;&#x2F;code&gt; is a once in &lt;code&gt;700k&lt;&#x2F;code&gt; event (12h)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;97&lt;&#x2F;code&gt; is a once in &lt;code&gt;270k&lt;&#x2F;code&gt; event (5h)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;96&lt;&#x2F;code&gt; is a once in &lt;code&gt;110k&lt;&#x2F;code&gt; event (2h)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;95&lt;&#x2F;code&gt; is a once in &lt;code&gt;50k&lt;&#x2F;code&gt; event (55m)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So if we only look at human fighters or mages, we can stop here:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;We are actually quite a lot more likely to get a good roll early than what just the pure dice math would indicate thanks to censoring (50k rolls =&amp;gt; likely &lt;code&gt;95&lt;&#x2F;code&gt; rather than estimated &lt;code&gt;90&lt;&#x2F;code&gt; without censoring).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;However, what&#x27;s up with the paladins and rangers? Time for a more painful math detour.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;bg&#x2F;amicat1-math.gif&quot; alt=&quot;sweat mile cat math&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;class-race-variance&quot;&gt;Class&#x2F;Race Variance&lt;&#x2F;h3&gt;
&lt;p&gt;The reason for the discrepancy is simple: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;rpg.stackexchange.com&#x2F;questions&#x2F;165377&#x2F;how-do-baldurs-gate-and-baldurs-gate-2s-rolling-for-stats-actually-get-gene&quot;&gt;stat floors based on races&#x2F;class&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;These stat floors are insignificant in some cases, but highly significant in others. Some highly floored classes actually push the uncensored mean above the &lt;code&gt;75&lt;&#x2F;code&gt; cutoff even though it&#x27;s a whole 12 points above the mean of the original underlying distribution.&lt;&#x2F;p&gt;
&lt;p&gt;The floors for a some of the classes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fighter&lt;&#x2F;strong&gt; mins: &lt;code&gt;STR=9&lt;&#x2F;code&gt;, rest &lt;code&gt;3&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;mage&lt;&#x2F;strong&gt; mins: &lt;code&gt;INT=9&lt;&#x2F;code&gt;, rest &lt;code&gt;3&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;paladin&lt;&#x2F;strong&gt; mins: &lt;code&gt;CHA=17&lt;&#x2F;code&gt;, &lt;code&gt;WIS=13&lt;&#x2F;code&gt;, &lt;code&gt;STR=12&lt;&#x2F;code&gt;, &lt;code&gt;CON=9&lt;&#x2F;code&gt;, rest &lt;code&gt;3&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;ranger&lt;&#x2F;strong&gt; mins: &lt;code&gt;CON=14&lt;&#x2F;code&gt;, &lt;code&gt;WIS=14&lt;&#x2F;code&gt;, &lt;code&gt;STR=13&lt;&#x2F;code&gt;, &lt;code&gt;DEX=13&lt;&#x2F;code&gt;, rest &lt;code&gt;3&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;baldursgate&#x2F;comments&#x2F;reevp6&#x2F;everyone_enjoys_a_good_high_ability_score_role_so&#x2F;&quot;&gt;other classes&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; mins: generally light floors&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;em&gt;In other words&lt;&#x2F;em&gt;: paladins and rangers have significantly higher rolls on average.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sidenote: in &lt;code&gt;2e&lt;&#x2F;code&gt; you actually rolled stats first, and &lt;strong&gt;only if&lt;&#x2F;strong&gt; you met the &lt;strong&gt;requirements&lt;&#x2F;strong&gt; could you become a Paladin &#x2F; Ranger. It&#x27;s an interesting choice. Would not call this fun.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Anyway. Is it possible to incorporate these floors into our modelling?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;floored-ability-distributions&quot;&gt;Floored Ability Distributions&lt;&#x2F;h2&gt;
&lt;p&gt;If floors are involved at earlier stages, we have to take a step back and look at the distributions that make up the sum. We &lt;strong&gt;can&lt;&#x2F;strong&gt; compute distributions for &lt;strong&gt;individual ability scores&lt;&#x2F;strong&gt; (even if floored) if we use the distribution for $P(x, 3, 6)$ from &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;mathworld.wolfram.com&#x2F;Dice.html&quot;&gt;mathworld&#x2F;Dice&lt;&#x2F;a&gt; where &lt;code&gt;s=6&lt;&#x2F;code&gt; and &lt;code&gt;n=3&lt;&#x2F;code&gt; and censor it at a cutoff point similar to how we censor the total distribution.&lt;&#x2F;p&gt;
&lt;p&gt;Computing the value without a floor follows the same setup as when we did 18 dice; use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.wolframalpha.com&#x2F;input?i2d=true&amp;amp;i=+Divide%5B1%2CPower%5B6%2C3%5D%5DSum%5BPower%5B%5C%2840%29-1%5C%2841%29%2Ck%5D+*binomial%5C%2840%293%5C%2844%29+k%5C%2841%29*binomial%5C%2840%2910-6k-1%5C%2844%29+2%5C%2841%29%2C%7Bk%2C0%2Cfloor%5C%2840%29Divide%5B%5C%2840%2910-3%5C%2841%29%2C6%5D%5C%2841%29%7D%5D&quot;&gt;wolfram alpha&lt;&#x2F;a&gt; and tabulate for $[3, \ldots, 18]$:&lt;&#x2F;p&gt;
&lt;div id=&quot;probhist3roll&quot; style=&quot;width:600px;height:450px;&quot;&gt;&lt;&#x2F;div&gt;
&lt;script&gt;
var THREEROLL_X = [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18];
&#x2F;&#x2F; probabilities for p=3 up to p=18 (also sums to 0.9999999999999999)
var THREEROLL_PROBS = [1&#x2F;216, 1&#x2F;72, 1&#x2F;36, 5&#x2F;108, 5&#x2F;72, 7&#x2F;72, 25&#x2F;216, 1&#x2F;8, 1&#x2F;8, 25&#x2F;216, 7&#x2F;72, 5&#x2F;72, 5&#x2F;108, 1&#x2F;36, 1&#x2F;72, 1&#x2F;216];
console.log(&quot;probability sum for 3d6 =&quot;, THREEROLL_PROBS.reduce((acc, e) =&gt; acc+e, 0));

var expectation_unt = THREEROLL_PROBS.map((x,i) =&gt; (i+3)*x).reduce((acc, e) =&gt; acc+e, 0);
var variance_unt = THREEROLL_PROBS.map((x,i) =&gt; Math.pow(i+3 - expectation_unt, 2)*x).reduce((acc, e) =&gt; acc+e, 0);
console.log(&quot;Expectation, variance for untruncated 3d6&quot;, expectation_unt, variance_unt);

var trace = {
  x: THREEROLL_X,
  y: THREEROLL_PROBS,
  name: &#x27;probability&#x27;,
  text: THREEROLL_PROBS.map(x =&gt; &quot;expected once in &quot; + Intl.NumberFormat().format(Math.floor(1&#x2F;x)) + &quot; rolls&quot;),
  opacity: 0.8,
  type: &quot;scatter&quot;,
};
var data = [trace];
var layout = {
  title: &quot;Distribution for the sum of 3d6 dice rolls&quot;,
  xaxis: {title: &quot;Roll&quot;},
  yaxis: {title: &quot;Probability&quot;},
};
Plotly.newPlot(document.getElementById(&#x27;probhist3roll&#x27;), data, layout);
&lt;&#x2F;script&gt;
&lt;p&gt;then we truncate + scale this at the observed floor points &lt;code&gt;9&lt;&#x2F;code&gt;, &lt;code&gt;12&lt;&#x2F;code&gt;, &lt;code&gt;13&lt;&#x2F;code&gt;, &lt;code&gt;14&lt;&#x2F;code&gt;, and &lt;code&gt;17&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;div id=&quot;probhist3rolltruncs&quot; style=&quot;width:600px;height:450px;&quot;&gt;&lt;&#x2F;div&gt;
&lt;script&gt;
var TRUNCATED_DISTS = {};
TRUNCATED_DISTS[0] = THREEROLL_PROBS.slice();
TRUNCATED_DISTS[3] = THREEROLL_PROBS.slice(); &#x2F;&#x2F; no truncation == truncation at 3
var truncated_trace = function (t) {
  &#x2F;&#x2F; calculate probability up to cutoff point:
  var TRUNC_T_SUM = THREEROLL_PROBS.slice(t-3).reduce((acc, e) =&gt; acc+e, 0);
  &#x2F;&#x2F; truncate and scale (rectify) the right side of the distribution:
  var THREE_TRUNC_T = THREEROLL_PROBS.slice(t-3).map(x =&gt; x &#x2F; TRUNC_T_SUM);
  &#x2F;&#x2F; sanity sum (all 1)
  &#x2F;&#x2F;console.log(&quot;Sum of 3d6 truncated at &quot;, t, &quot;:&quot;, THREE_TRUNC_T.reduce((acc, e)=&gt;acc+e, 0));
  var expectation = THREE_TRUNC_T.map((x,i) =&gt; (i+t)*x).reduce((acc, e) =&gt; acc+e, 0);
  var variance = THREE_TRUNC_T.map((x,i) =&gt; Math.pow(i+t - expectation, 2)*x).reduce((acc, e) =&gt; acc+e, 0);
  console.log(&quot;Expectation, variance for truncated 3d6 at&quot;, t, expectation, variance);
  TRUNCATED_DISTS[t] = THREE_TRUNC_T;
  var trace = {
    x: THREEROLL_X.slice(t-3),
    y: THREE_TRUNC_T,
    name: &#x27;floor &#x27; + t,
    text: THREE_TRUNC_T.map(x =&gt; &quot;expected once in &quot; + Intl.NumberFormat(&#x27;en-IN&#x27;, {maximumSignificantDigits: 2}).format(1&#x2F;x) + &quot; rolls&quot;),
    opacity: 0.8,
    type: &quot;scatter&quot;,
  };
  return trace;
};

let trace_9 = truncated_trace(9);
let trace_12 = truncated_trace(12);
let trace_13 = truncated_trace(13);
let trace_14 = truncated_trace(14);
let trace_17 = truncated_trace(17);

var data = [trace_9, trace_12, trace_13, trace_14, trace_17];
var layout = {
  title: &quot;Rectified Distribution for the sum of 3d6 dice rolls&quot;,
  xaxis: {title: &quot;Roll&quot;},
  yaxis: {title: &quot;Probability&quot;},
};
Plotly.newPlot(document.getElementById(&#x27;probhist3rolltruncs&#x27;), data, layout);
&lt;&#x2F;script&gt;
&lt;p&gt;To avoid having to write out conditionals $P(X = x| X\ge k)$ everywhere we will denote $X^{\lfloor k \rfloor}$ as one of these graphed multinomial distributions for the sum of &lt;code&gt;3d6&lt;&#x2F;code&gt; floored at $k$:&lt;&#x2F;p&gt;
&lt;p&gt;$$X^{\lfloor k \rfloor} \sim \mathcal{M}^{\lfloor k \rfloor}(3d6)$$&lt;&#x2F;p&gt;
&lt;p&gt;Note also that an unfloored ability score $X$ is equal to $X^{\lfloor3\rfloor}$.&lt;&#x2F;p&gt;
&lt;p&gt;We can then compute precise conditional expectations by floor:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$\mathbb{E}(X^{\lfloor3\rfloor}) = \mathbb{E}(X) = 3\sum_{k=1}^{6}\frac{k}{6} = 3*3.5 = 10.5$&lt;&#x2F;li&gt;
&lt;li&gt;$\mathbb{E}(X^{\lfloor9\rfloor}) = 11.8125$&lt;&#x2F;li&gt;
&lt;li&gt;$\mathbb{E}(X^{\lfloor12\rfloor}) = 13.5555$&lt;&#x2F;li&gt;
&lt;li&gt;$\mathbb{E}(X^{\lfloor13\rfloor}) = 14.2500$&lt;&#x2F;li&gt;
&lt;li&gt;$\mathbb{E}(X^{\lfloor14\rfloor}) = 15.0000$&lt;&#x2F;li&gt;
&lt;li&gt;$\mathbb{E}(X^{\lfloor17\rfloor}) = 17.2500$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Similarly, we can compute precise variances:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$Var(X^{\lfloor3\rfloor}) = Var(X) = 3\sum_{k=1}^6\frac{(x_i - 3.5)^2}{6} = 3*2.92 = 8.75$&lt;&#x2F;li&gt;
&lt;li&gt;$Var(X^{\lfloor9\rfloor}) = 4.5773$&lt;&#x2F;li&gt;
&lt;li&gt;$Var(X^{\lfloor12\rfloor}) = 2.2469$&lt;&#x2F;li&gt;
&lt;li&gt;$Var(X^{\lfloor13\rfloor}) = 1.6875$&lt;&#x2F;li&gt;
&lt;li&gt;$Var(X^{\lfloor14\rfloor}) = 1.2000$&lt;&#x2F;li&gt;
&lt;li&gt;$Var(X^{\lfloor17\rfloor}) = 0.1875$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;sum-of-floored-ability-distributions&quot;&gt;Sum of Floored Ability Distributions&lt;&#x2F;h3&gt;
&lt;p&gt;Define $Z_{paladin}$, $Z_{ranger}$ and $Z_{fighter}$ as:&lt;&#x2F;p&gt;
&lt;p&gt;$$Z_{paladin} = X_1^{\lfloor17\rfloor} + X_2^{\lfloor13\rfloor} + X_3^{\lfloor12\rfloor} + X_4^{\lfloor9\rfloor} + X_5^{\lfloor3\rfloor} + X_6^{\lfloor3\rfloor}$$
$$Z_{ranger} = X_1^{\lfloor14\rfloor} + X_2^{\lfloor14\rfloor} + X_3^{\lfloor13\rfloor} + X_4^{\lfloor13\rfloor} + X_5^{\lfloor3\rfloor} + X_6^{\lfloor3\rfloor}$$
$$Z_{fighter} = X_1^{\lfloor9\rfloor} + X_2^{\lfloor3\rfloor} + X_3^{\lfloor3\rfloor} + X_4^{\lfloor3\rfloor} + X_5^{\lfloor3\rfloor} + X_6^{\lfloor3\rfloor}$$&lt;&#x2F;p&gt;
&lt;p&gt;for floored 3d6 based random variables $X_i^{\lfloor N \rfloor}  \sim \mathcal{M}^{\lfloor N \rfloor}(3d6)$.&lt;&#x2F;p&gt;
&lt;p&gt;Using the computed expectations above to sum across the 6 main stats:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$\mathbb{E}(Fighter) = \mathbb{E}(X^{\lfloor9\rfloor}) + 5\mathbb{E}(X) = 64.31$&lt;&#x2F;li&gt;
&lt;li&gt;$\mathbb{E}(Ranger) = 2\mathbb{E}(X^{\lfloor14\rfloor}) + 2\mathbb{E}(X^{\lfloor13\rfloor}) + 2\mathbb{E}(X) = 79.5$&lt;&#x2F;li&gt;
&lt;li&gt;$\mathbb{E}(Paladin) = \mathbb{E}(X^{\lfloor17\rfloor}) + \mathbb{E}(X^{\lfloor13\rfloor}) + \mathbb{E}(X^{\lfloor12\rfloor}) + \mathbb{E}(X^{\lfloor9\rfloor})+ 2\mathbb{E}(X) = 77.86$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;and similarly for variance:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$Var(Fighter) = Var(X^{\lfloor9\rfloor}) + 5Var(X) \thickapprox 6.95^2$&lt;&#x2F;li&gt;
&lt;li&gt;$Var(Ranger) = 2Var(X^{\lfloor14\rfloor}) + 2Var(X^{\lfloor13\rfloor}) + 2Var(X) \thickapprox 4.82^2$&lt;&#x2F;li&gt;
&lt;li&gt;$Var(Paladin) = Var(X^{\lfloor17\rfloor}) + Var(X^{\lfloor13\rfloor}) + Var(X^{\lfloor12\rfloor}) + Var(X^{\lfloor3\rfloor})+ 2Var(X) \thickapprox 5.12^2$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;noting that variables are independent under the observed two stage censoring.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why can we rely on two stage censoring and their independence? If any of these internal mechanisms used some kind of &lt;code&gt;if&lt;&#x2F;code&gt; condition or &lt;code&gt;min&lt;&#x2F;code&gt; function, it would be immediately obvious from the distribution. The paladin distribution of charisma is clearly a &lt;code&gt;~1&#x2F;4&lt;&#x2F;code&gt; for an &lt;code&gt;18&lt;&#x2F;code&gt;, and &lt;code&gt;~3&#x2F;4&lt;&#x2F;code&gt; for a &lt;code&gt;17&lt;&#x2F;code&gt;; it would have been much rarer to see an 18 otherwise.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Thus, the distributions of our classes are based on multinomal-based distributions with the following first moments:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$Uncensored\ Fighter \sim \mathcal{M}(\mu = 64.31, \sigma^2 = 6.95^2)$&lt;&#x2F;li&gt;
&lt;li&gt;$Uncensored\ Ranger \sim \mathcal{M}(\mu = 79.5, \sigma^2 = 4.82^2)$&lt;&#x2F;li&gt;
&lt;li&gt;$Uncensored\ Paladin \sim \mathcal{M}(\mu = 77.86, \sigma^2 = 5.12^2)$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is nice as a quick overview of what&#x27;s best in the higher ranges, but it&#x27;s not very precise. Without the &lt;strong&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Probability_mass_function&quot;&gt;PMF&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; for the &lt;strong&gt;sum of our ability scores&lt;&#x2F;strong&gt;, it&#x27;s hard to give good values for what the truncated version will look like (we are censoring in two stages). In particular, these heavily floored random variables end up giving us quite asymmetrical distributions in the tails.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;class-distributions&quot;&gt;Class Distributions&lt;&#x2F;h3&gt;
&lt;p&gt;Thankfully, it is possible to inductively compute the pmf of $Z_{class}$ via &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Convolution#Discrete_convolution&quot;&gt;convolution&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Some internet digging notwithstanding; most answers found online for this required &lt;strong&gt;either&lt;&#x2F;strong&gt; &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;stats.stackexchange.com&#x2F;questions&#x2F;3614&#x2F;how-to-easily-determine-the-results-distribution-for-multiple-dice&#x2F;3684#3684&quot;&gt;mathematica functions&lt;&#x2F;a&gt; (that we do not have here in our inlined source), &lt;strong&gt;or&lt;&#x2F;strong&gt; a slightly more laborious manual convolution. We will follow the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;stats.libretexts.org&#x2F;Bookshelves&#x2F;Probability_Theory&#x2F;Book%3A_Introductory_Probability_(Grinstead_and_Snell)&#x2F;07%3A_Sums_of_Random_Variables&#x2F;7.01%3A_Sums_of_Discrete_Random_Variables&quot;&gt;inductive convolution approach&lt;&#x2F;a&gt; which we can solve with recursion. Paladin case:&lt;&#x2F;p&gt;
&lt;p&gt;Let $X_{12} = X_1^{\lfloor17\rfloor} + X_2^{\lfloor13\rfloor}$. We can generate values for the pmf $p_{X_{12}}$ for $X_{12}$ via the pmfs $p_{X_i}$ for $X_1^{\lfloor17\rfloor}$ and $X_2^{\lfloor13\rfloor}$ via the convolution formula:&lt;&#x2F;p&gt;
&lt;p&gt;$$P(X_{12} = n) = (p_{X_1} * p_{X_2})(n) = \sum_{m=-\infty}^{\infty}P(X_1=m)P(X_2 = n-m)$$&lt;&#x2F;p&gt;
&lt;p&gt;This step is particularly easy for the paladin, because $X_1^{\lfloor17\rfloor}$ only takes two values (i.e. $m=17$ ahd $m=18$ are the only non-zero parts in the sum).&lt;&#x2F;p&gt;
&lt;p&gt;The rest is less easy to do by hand, as the sums get increasingly large while we iterate towards $Z=P_{123456}$ by repeatedly applying convolution to the remaining $X_i$:&lt;&#x2F;p&gt;
&lt;p&gt;$$P(X_{123} = n) = (p_{X_{12}} * p_{X_3})(n) \sum_{m=-\infty}^{\infty}P(X_{12}=m)P(X_3 = n-m)$$&lt;&#x2F;p&gt;
&lt;p&gt;$$P(X_{1234} = n) = (p_{X_{123}} * p_{X_4})(n) \sum_{m=-\infty}^{\infty}P(X_{123}=m)P(X_4 = n-m)$$&lt;&#x2F;p&gt;
&lt;p&gt;$$P(X_{12345} = n) = (p_{X_{1234}} * p_{X_5})(n) \sum_{m=-\infty}^{\infty}P(X_{1234}=m)P(X_5 = n-m)$$&lt;&#x2F;p&gt;
&lt;p&gt;$$P(X_{123456} = n) = (p_{X_{12345}} * p_{X_5})(n) \sum_{m=-\infty}^{\infty}P(X_{12345}=m)P(X_6 = n-m)$$&lt;&#x2F;p&gt;
&lt;p&gt;The hard work is correctly matching indexes in our probability arrays that serve as our mass functions to the sum, and defaulting to zero when accessing out of bounds:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; class=&quot;language-js z-code&quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-ts&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt; given pXi = [0.75, 0.25], pXj = [0.375, 0.2678, 0.1786, 0.1071, 0.05357, 0.01786]&lt;&#x2F;span&gt;
&lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-ts&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt; (approximations of the first two truncated paladin probability arrays for CHA + WIS)&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;var&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;convolve&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-expression z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-ts&quot;&gt;function&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-parameters z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-begin z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-ts&quot;&gt;pXi&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-parameter z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-ts&quot;&gt;pXj&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-end z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-whitespace z-comment z-leading z-ts&quot;&gt;  &lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-ts&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt; pre-allocate a zero-indexed array where our probabilities will go&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;var&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;pXij&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-array z-literal z-ts&quot;&gt; &lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-spread z-ts&quot;&gt;...&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-support z-class z-builtin z-ts&quot;&gt;Array&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-object z-ts&quot;&gt;pXi&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-variable z-property z-ts&quot;&gt;length&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-ts&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-object z-ts&quot;&gt;pXj&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-variable z-property z-ts&quot;&gt;length&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-ts&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-dom z-ts&quot;&gt;keys&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-whitespace z-comment z-leading z-ts&quot;&gt;  &lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-ts&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt; loop to generate P(Xij = n) for all n&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-keyword z-control z-loop z-ts&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;n&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;n&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-relational z-ts&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-object z-ts&quot;&gt;pXi&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-variable z-property z-ts&quot;&gt;length&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-ts&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-object z-ts&quot;&gt;pXj&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-variable z-property z-ts&quot;&gt;length&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-ts&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;n&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-compound z-ts&quot;&gt;+=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;pXij&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-array z-literal z-ts&quot;&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;n&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-ts&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt; init to zero&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-whitespace z-comment z-leading z-ts&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-ts&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt; loop to do sum over m, first variable determines length of this sum&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-keyword z-control z-loop z-ts&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;m&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;m&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-relational z-ts&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-object z-ts&quot;&gt;pXi&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-variable z-property z-ts&quot;&gt;length&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;m&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-compound z-ts&quot;&gt;+=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-whitespace z-comment z-leading z-ts&quot;&gt;      &lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-ts&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt; we do defaulting outside range with `|| 0`&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;pXij&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-array z-literal z-ts&quot;&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;n&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-compound z-ts&quot;&gt;+=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;pXi&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-array z-literal z-ts&quot;&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;m&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-ts&quot;&gt;||&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-ts&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;pXj&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-array z-literal z-ts&quot;&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;n&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-ts&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;m&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-ts&quot;&gt;||&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-keyword z-control z-flow z-ts&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;pXij&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-ts&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt; returns [0.28125, 0.29464, 0.2009, 0.125, 0.06696, 0.02678, 0.004464]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using this, we can compute the PMF for $Z_{class} = X_{123456}$:&lt;&#x2F;p&gt;
&lt;p&gt;$$P(Z_{class} = z) = (((((p_{X_1} * p_{X_2}) * p_{X_3}) * p_{X_4}) * p_{X_5}) * p_{X_6}) (z)$$&lt;&#x2F;p&gt;
&lt;p&gt;and we graph them for various classes:&lt;&#x2F;p&gt;
&lt;div id=&quot;probhist3convolved&quot; style=&quot;width:600px;height:450px;&quot;&gt;&lt;&#x2F;div&gt;
&lt;script&gt;
&#x2F;&#x2F; The first one is easy, P_1 only has 2 values =&gt; m={0,1}
&#x2F;&#x2F;let pX1 = TRUNCATED_DISTS[17]; &#x2F;&#x2F; 2 values, for 17,18
&#x2F;&#x2F;let pX2 = TRUNCATED_DISTS[13]; &#x2F;&#x2F; 6 values, for 13,...,18
&#x2F;&#x2F;console.log(&quot;convolving&quot;, pX1, pX2)
&#x2F;&#x2F; new dist starts at 17+13 and goes to 18x2
&#x2F;&#x2F;let pX12 = [];
&#x2F;&#x2F;pX12[0] = pX1[0] * pX2[0]; &#x2F;&#x2F; 17+13 || 18+12 (zero)
&#x2F;&#x2F;pX12[1] = pX1[0] * pX2[1] + pX1[1]*pX2[0]; &#x2F;&#x2F; 17+14 || 18+13
&#x2F;&#x2F;pX12[2] = pX1[0] * pX2[2] + pX1[1]*pX2[1]; &#x2F;&#x2F; 17+15 || 18+14
&#x2F;&#x2F;pX12[3] = pX1[0] * pX2[3] + pX1[1]*pX2[2]; &#x2F;&#x2F; 17+16 || 18+15
&#x2F;&#x2F;pX12[4] = pX1[0] * pX2[4] + pX1[1]*pX2[3]; &#x2F;&#x2F; 17+17 || 18+16
&#x2F;&#x2F;pX12[5] = pX1[0] * pX2[5] + pX1[1]*pX2[4]; &#x2F;&#x2F; 17+18 || 18+17
&#x2F;&#x2F;pX12[6] =                 + pX1[1]*pX2[5]; &#x2F;&#x2F; 17+19 (zero) || 18+18
&#x2F;&#x2F;console.log(pX12, pX12.reduce((acc,e)=&gt;acc+e,0)); &#x2F;&#x2F; perfect

&#x2F;&#x2F; then do P_{12} + P_3
&#x2F;&#x2F;pX12 has 7 values, for 30, 31, 32, 33, 34, 35, 36
&#x2F;&#x2F;let pX3 = TRUNCATED_DISTS[12]; &#x2F;&#x2F; has 7 values, for 12,13,14,15,16,17,18
&#x2F;&#x2F; new dist starts at 30+12 and goes to 18x3 i.e. length (13)
&#x2F;&#x2F;let pX123 = [];
&#x2F;&#x2F;pX123[0] = pX12[0]*pX3[0]; &#x2F;&#x2F; 42 : 30+12
&#x2F;&#x2F;pX123[1] = pX12[0]*pX3[1] + pX12[1]*pX3[0]; &#x2F;&#x2F; 43: 30+13 || 31+12
&#x2F;&#x2F;pX123[2] = pX12[0]*pX3[2] + pX12[1]*pX3[1] + pX12[2]*pX3[0]; &#x2F;&#x2F; 44: 30+14 || 31+13 || 32+12
&#x2F;&#x2F;pX123[3] = pX12[0]*pX3[3] + pX12[1]*pX3[2] + pX12[2]*pX3[1] + pX12[3] +pX3[0]; &#x2F;&#x2F; 45: 30+15 || 31+14 || 32+13 || 33+12
&#x2F;&#x2F; ok... clearly not a hand written thing, but matches convolve result

&#x2F;&#x2F; what am i doing with my life
var convolve = function (pXi, pXj) {
  &#x2F;&#x2F; pre-allocate a zero-indexed array where our probabilities will go
  var pXij = [...Array(pXi.length + pXj.length - 1).keys()];
  &#x2F;&#x2F; loop to generate P(Xij = n) for all n
  for (let n = 0; n &lt; pXi.length + pXj.length - 1; n += 1) {
    pXij[n] = 0; &#x2F;&#x2F; init to zero
    &#x2F;&#x2F; loop to do sum over m, first variable determines length of this sum
    for (let m = 0; m &lt; pXi.length; m += 1) {
      &#x2F;&#x2F; we do defaulting outside range with `|| 0`
      pXij[n] += (pXi[m] || 0) * (pXj[n-m] || 0);
    }
  }
  return pXij;
}

&#x2F;&#x2F; doing paladin from function above:
&#x2F;&#x2F;let pX1 = TRUNCATED_DISTS[17]; &#x2F;&#x2F; 2 values; 17,18
&#x2F;&#x2F;let pX2 = TRUNCATED_DISTS[13]; &#x2F;&#x2F; 6 values; 13,...,18
&#x2F;&#x2F;let pX3 = TRUNCATED_DISTS[12]; &#x2F;&#x2F; 7 values; 12,13,14,15,16,17,18
&#x2F;&#x2F;let pX4 = TRUNCATED_DISTS[9]; &#x2F;&#x2F; 10 values; 9,...,18
&#x2F;&#x2F;let pX5 = TRUNCATED_DISTS[3]; &#x2F;&#x2F; 16 values; 3,...,18
&#x2F;&#x2F;let pX6 = TRUNCATED_DISTS[3]; &#x2F;&#x2F; ditto
&#x2F;&#x2F;let gen12 = convolve(pX1, pX2); &#x2F;&#x2F; dist from 30 -&gt; 36
&#x2F;&#x2F;let gen123 = convolve(gen12, pX3); &#x2F;&#x2F; dist from 42 -&gt; 54
&#x2F;&#x2F;let gen1234 = convolve(gen123, pX4); &#x2F;&#x2F; dist from 51 -&gt; 72
&#x2F;&#x2F;let gen12345 = convolve(gen1234, pX5); &#x2F;&#x2F; dist from 54 -&gt; 90
&#x2F;&#x2F;let gen123456 = convolve(gen12345, pX6); &#x2F;&#x2F; dist from 57 -&gt; 108
&#x2F;&#x2F;console.log(gen123456, gen123456.length)

&#x2F;&#x2F; automating class convolution
CONVOLVED_DISTS = {};
var gen_convolved_trace_for_class_dist = function(dists, klss) {
  var pX1 = TRUNCATED_DISTS[dists[0]];
  var pX2 = TRUNCATED_DISTS[dists[1]];
  var pX3 = TRUNCATED_DISTS[dists[2]];
  var pX4 = TRUNCATED_DISTS[dists[3]];
  var pX5 = TRUNCATED_DISTS[dists[4]];
  var pX6 = TRUNCATED_DISTS[dists[5]];
  var start = dists.reduce((acc, e) =&gt; acc+e, 0); &#x2F;&#x2F; start at sum of floors

  let gen12 = convolve(pX1, pX2);
  let gen123 = convolve(gen12, pX3);
  let gen1234 = convolve(gen123, pX4);
  let gen12345 = convolve(gen1234, pX5);
  let gen123456 = convolve(gen12345, pX6);
  CONVOLVED_DISTS[klss] = gen123456;

  return {
    x: gen123456.slice().map((x,i)=&gt; i + start),
    y: gen123456,
    name: klss,
    text: gen123456.map(x =&gt; &quot;expected once in &quot; + Intl.NumberFormat().format(Math.floor(1&#x2F;x)) + &quot; rolls&quot;),
    opacity: 0.8,
    type: &quot;scatter&quot;,
  };
}
var trace_paladin = gen_convolved_trace_for_class_dist([17,13,12,9,3,3], &#x27;paladin&#x27;);
var trace_ranger = gen_convolved_trace_for_class_dist([14,14,13,13,3,3], &#x27;ranger&#x27;);
var trace_fighter = gen_convolved_trace_for_class_dist([9,3,3,3,3,3], &#x27;fighter&#x27;);
trace_fighter.visible = &#x27;legendonly&#x27;; &#x2F;&#x2F; default off since we&#x27;ve kind of covered it
var data = [trace_paladin, trace_ranger, trace_fighter];
var layout = {
  title: &quot;Convolved Ability Distributions for Classes&quot;,
  xaxis: {title: &quot;Roll&quot;},
  yaxis: {title: &quot;Probability&quot;},
};
Plotly.newPlot(document.getElementById(&#x27;probhist3convolved&#x27;), data, layout);
&lt;&#x2F;script&gt;
&lt;blockquote&gt;
&lt;p&gt;Notice the heavily tilted ranger&#x2F;paladin distributions whose lean is distinctively more to the right.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The last thing that&#x27;s left now is to rectify $Z_c$ at &lt;code&gt;75&lt;&#x2F;code&gt; to get our &lt;strong&gt;true, final distributions&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;div id=&quot;probhist3convolvedtrunc&quot; style=&quot;width:600px;height:450px;&quot;&gt;&lt;&#x2F;div&gt;
&lt;script&gt;
var truncated_klass = function (klss) {
  let CONVOLVED = CONVOLVED_DISTS[klss];
  &#x2F;&#x2F; calculate probability up to cutoff point:
  let TRUNC_SUM = CONVOLVED.slice(-(108-75+1)).reduce((acc, e) =&gt; acc+e, 0);
  &#x2F;&#x2F; truncate and scale (rectify) the right side of the distribution:
  let TRUNC_CONV = CONVOLVED.slice(-(108-75+1)).map(x =&gt; x &#x2F; TRUNC_SUM);
  &#x2F;&#x2F; sanity sum (all 1)
  console.log(&quot;Sum of convolved truncated&quot;, klss, TRUNC_CONV.reduce((acc, e)=&gt;acc+e, 0));
  &#x2F;&#x2F;let expectation = TRUNC_CONV.map((x,i) =&gt; (i+t)*x).reduce((acc, e) =&gt; acc+e, 0);
  &#x2F;&#x2F;let variance = TRUNC_CONV.map((x,i) =&gt; Math.pow(i+t - expectation, 2)*x).reduce((acc, e) =&gt; acc+e, 0);
  &#x2F;&#x2F;console.log(&quot;Expectation, variance for conv truncated&quot;, klss, expectation, variance);
  return {
    x: TRUNC_CONV.map((x,i) =&gt; i +75),
    y: TRUNC_CONV,
    name: &#x27;true &#x27; + klss,
    text: TRUNC_CONV.map(x =&gt; &quot;expected once in &quot; + Intl.NumberFormat().format(Math.floor(1&#x2F;x)) + &quot; rolls&quot;),
    opacity: 0.8,
    type: &quot;scatter&quot;,
  };
};
let trace_trunconv_paladin = truncated_klass(&#x27;paladin&#x27;);
let trace_trunconv_fighter = truncated_klass(&#x27;fighter&#x27;);
let trace_trunconv_ranger = truncated_klass(&#x27;ranger&#x27;);
trace_trunconv_fighter.visible = &#x27;legendonly&#x27;;
var data = [trace_trunconv_paladin, trace_trunconv_fighter, trace_trunconv_ranger];
var layout = {
  title: &quot;True Roll Distributions for Classes&quot;,
  xaxis: {title: &quot;Roll&quot;},
  yaxis: {title: &quot;Probability&quot;},
};
Plotly.newPlot(document.getElementById(&#x27;probhist3convolvedtrunc&#x27;), data, layout);
&lt;&#x2F;script&gt;
&lt;p&gt;These match the sampled data almost perfectly as can be seen in more detailed comparisons in the &lt;a href=&quot;#appendix&quot;&gt;appendix&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As can be seen; &lt;code&gt;ranger&lt;&#x2F;code&gt; is faster at getting high numbers, particularly in the 90 -&amp;gt; 97 range, but if you want rolls &amp;gt;= 100, &lt;strong&gt;&lt;code&gt;paladin&lt;&#x2F;code&gt; rolls the highest&lt;&#x2F;strong&gt; at the fastest rate.&lt;&#x2F;p&gt;
&lt;p&gt;We end with the expected time to roll above a certain threshold where we use the most efficient class based on the number:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;108&lt;&#x2F;code&gt; paladin rolls once in &lt;code&gt;100 billion&lt;&#x2F;code&gt; ⇒ 210y&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;107&lt;&#x2F;code&gt; paladin rolls once in &lt;code&gt;5 billion&lt;&#x2F;code&gt; ⇒ 10y&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;106&lt;&#x2F;code&gt; paladin rolls once in &lt;code&gt;600 million&lt;&#x2F;code&gt; ⇒ 1y&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;105&lt;&#x2F;code&gt; paladin rolls once in &lt;code&gt;100 million&lt;&#x2F;code&gt; ⇒ 11w&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;104&lt;&#x2F;code&gt; paladin rolls once in &lt;code&gt;19 million&lt;&#x2F;code&gt; ⇒ 2w&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;103&lt;&#x2F;code&gt; paladin rolls once in &lt;code&gt;5 million&lt;&#x2F;code&gt; ⇒ 4d&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;102&lt;&#x2F;code&gt; paladin rolls once in &lt;code&gt;1.4 million&lt;&#x2F;code&gt; ⇒ 1d&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;101&lt;&#x2F;code&gt; paladin rolls once in &lt;code&gt;400k&lt;&#x2F;code&gt; ⇒ 7h&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;100&lt;&#x2F;code&gt; paladin&#x2F;ranger rolls once in &lt;code&gt;150k&lt;&#x2F;code&gt; ⇒ 3h&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;99&lt;&#x2F;code&gt; ranger rolls once in &lt;code&gt;57k&lt;&#x2F;code&gt; ⇒ 1h&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;98&lt;&#x2F;code&gt; ranger rolls once in &lt;code&gt;23k&lt;&#x2F;code&gt; ⇒ 25m&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;97&lt;&#x2F;code&gt; ranger rolls once in &lt;code&gt;10k&lt;&#x2F;code&gt; ⇒ 11m&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;96&lt;&#x2F;code&gt; ranger rolls once in &lt;code&gt;5k&lt;&#x2F;code&gt; ⇒ 5m&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;95&lt;&#x2F;code&gt; ranger rolls once in &lt;code&gt;2k&lt;&#x2F;code&gt; ⇒ 2m&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Hope you have enjoyed this random brain dump on probability. Don&#x27;t think I have ever been nerd sniped this hard before.. I just wanted to play a game and take a break.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;small&gt;&#x2F;me closes 20 tabs&lt;&#x2F;small&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;appendix&quot;&gt;Appendix&lt;&#x2F;h2&gt;
&lt;details&gt;&lt;summary style=&quot;cursor:pointer&quot;&gt;&lt;b&gt;1. Raw simulation data&lt;&#x2F;b&gt;&lt;&#x2F;summary&gt;
&lt;p&gt;
&lt;p&gt;10 hour paladin roll (&lt;code&gt;555558&lt;&#x2F;code&gt; rolls in &lt;code&gt;601m&lt;&#x2F;code&gt;)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; class=&quot;language-yaml z-code&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;75&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;50888&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;76&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;54911&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;77&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;57338&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;78&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;57442&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;79&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;55589&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;80&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;52357&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;81&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;47503&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;82&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;41339&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;83&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;34458&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;84&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;28599&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;85&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;21997&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;86&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;16722&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;87&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;12322&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;88&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;8697&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;89&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;5997&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;90&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;3774&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;91&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;2371&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;92&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;1489&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;93&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;822&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;94&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;465&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;95&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;251&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;96&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;129&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;97&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;56&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;98&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;24&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;99&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;12&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;100&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;4&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;101&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;1&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;102&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;1&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;10 hour fighter roll (&lt;code&gt;555560&lt;&#x2F;code&gt; rolls in &lt;code&gt;608m&lt;&#x2F;code&gt;)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; class=&quot;language-yaml z-code&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;75&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;137379&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;76&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;109198&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;77&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;85620&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;78&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;65004&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;79&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;48256&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;80&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;35041&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;81&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;24987&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;82&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;17545&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;83&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;11981&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;84&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;7883&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;85&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;5007&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;86&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;3139&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;87&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;1946&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;88&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;1138&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;89&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;670&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;90&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;368&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;91&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;199&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;92&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;103&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;93&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;49&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;94&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;26&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;95&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;12&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;96&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;6&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;97&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;2&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;98&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;1&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;9 hour ranger roll (&lt;code&gt;500054&lt;&#x2F;code&gt; rolls in &lt;code&gt;548m&lt;&#x2F;code&gt;)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; class=&quot;language-yaml z-code&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;75&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;32296&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;76&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;37790&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;77&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;43118&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;78&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;46609&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;79&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;48108&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;80&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;47589&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;81&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;45774&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;82&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;41963&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;83&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;36876&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;84&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;30973&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;85&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;25272&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;86&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;19904&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;87&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;14730&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;88&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;10430&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;89&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;7285&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;90&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;4667&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;91&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;2991&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;92&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;1696&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;93&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;986&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;94&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;529&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;95&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;254&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;96&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;121&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;97&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;56&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;98&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;26&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;99&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;10&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;100&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;1&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;p&gt;
&lt;&#x2F;details&gt;
&lt;details&gt;&lt;summary style=&quot;cursor:pointer&quot;&gt;&lt;b&gt;2. Tabulated values for 18 dice multinomial probability distribution&lt;&#x2F;b&gt;&lt;&#x2F;summary&gt;
&lt;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.wolframalpha.com&#x2F;input?i2d=true&amp;amp;i=+Divide%5B1%2CPower%5B6%2C18%5D%5DSum%5BPower%5B%5C%2840%29-1%5C%2841%29%2Ck%5D+*binomial%5C%2840%2918%5C%2844%29+k%5C%2841%29*binomial%5C%2840%2991-6k-1%5C%2844%29+17%5C%2841%29%2C%7Bk%2C0%2Cfloor%5C%2840%29Divide%5B%5C%2840%2991-18%5C%2841%29%2C6%5D%5C%2841%29%7D%5D&quot;&gt;Wolfram Alpha Query&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; class=&quot;language-yaml z-code&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;18&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;1&#x2F;101559956668416&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;19&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;1&#x2F;5642219814912&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;20&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;19&#x2F;11284439629824&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;21&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;95&#x2F;8463329722368&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;22&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;665&#x2F;11284439629824&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;23&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;1463&#x2F;5642219814912&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;24&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;33643&#x2F;33853318889472&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;25&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;9605&#x2F;2821109907456&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;26&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;119833&#x2F;11284439629824&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;27&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;1552015&#x2F;50779978334208&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;28&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;308465&#x2F;3761479876608&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;29&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;97223&#x2F;470184984576&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;30&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;2782169&#x2F;5642219814912&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;31&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;1051229&#x2F;940369969152&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;32&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;4550747&#x2F;1880739938304&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;33&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;786505&#x2F;156728328192&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;34&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;37624655&#x2F;3761479876608&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;35&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;36131483&#x2F;1880739938304&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;36&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;1206294965&#x2F;33853318889472&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;37&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;20045551&#x2F;313456656384&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;38&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;139474379&#x2F;1253826625536&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;39&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;1059736685&#x2F;5642219814912&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;40&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;128825225&#x2F;417942208512&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;41&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;17143871&#x2F;34828517376&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;42&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;8640663457&#x2F;11284439629824&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;43&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;728073331&#x2F;626913312768&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;44&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;2155134523&#x2F;1253826625536&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;45&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;3942228889&#x2F;1586874322944&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;46&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;4949217565&#x2F;1410554953728&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;47&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;3417441745&#x2F;705277476864&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;48&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;27703245169&#x2F;4231664861184&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;49&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;3052981465&#x2F;352638738432&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;50&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;126513483013&#x2F;11284439629824&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;51&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;240741263447&#x2F;16926659444736&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;52&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;199524184055&#x2F;11284439629824&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;53&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;60788736553&#x2F;2821109907456&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;54&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;2615090074301&#x2F;101559956668416&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;55&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;56759069113&#x2F;1880739938304&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;56&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;130521904423&#x2F;3761479876608&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;57&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;110438453753&#x2F;2821109907456&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;58&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;163027882055&#x2F;3761479876608&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;59&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;88576807769&#x2F;1880739938304&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;60&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;566880747559&#x2F;11284439629824&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;61&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;24732579319&#x2F;470184984576&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;62&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;101698030955&#x2F;1880739938304&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;63&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;461867856157&#x2F;8463329722368&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;64&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;101698030955&#x2F;1880739938304&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;65&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;24732579319&#x2F;470184984576&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;66&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;566880747559&#x2F;11284439629824&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;67&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;88576807769&#x2F;1880739938304&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;68&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;163027882055&#x2F;3761479876608&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;69&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;110438453753&#x2F;2821109907456&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;70&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;130521904423&#x2F;3761479876608&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;71&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;56759069113&#x2F;1880739938304&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;72&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;2615090074301&#x2F;101559956668416&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;73&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;60788736553&#x2F;2821109907456&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;74&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;199524184055&#x2F;11284439629824&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;75&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;240741263447&#x2F;16926659444736&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;76&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;126513483013&#x2F;11284439629824&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;77&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;3052981465&#x2F;352638738432&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;78&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;27703245169&#x2F;4231664861184&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;79&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;3417441745&#x2F;705277476864&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;80&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;4949217565&#x2F;1410554953728&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;81&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;3942228889&#x2F;1586874322944&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;82&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;2155134523&#x2F;1253826625536&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;83&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;728073331&#x2F;626913312768&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;84&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;8640663457&#x2F;11284439629824&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;85&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;17143871&#x2F;34828517376&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;86&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;128825225&#x2F;417942208512&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;87&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;1059736685&#x2F;5642219814912&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;88&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;139474379&#x2F;1253826625536&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;89&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;20045551&#x2F;313456656384&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;90&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;1206294965&#x2F;33853318889472&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;91&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;36131483&#x2F;1880739938304&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;92&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;37624655&#x2F;3761479876608&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;93&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;786505&#x2F;156728328192&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;94&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;4550747&#x2F;1880739938304&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;95&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;1051229&#x2F;940369969152&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;96&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;2782169&#x2F;5642219814912&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;97&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;97223&#x2F;470184984576&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;98&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;308465&#x2F;3761479876608&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;99&lt;&#x2F;span&gt;  &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;1552015&#x2F;50779978334208&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;100&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;119833&#x2F;11284439629824&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;101&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;9605&#x2F;2821109907456&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;102&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;33643&#x2F;33853318889472&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;103&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;1463&#x2F;5642219814912&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;104&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;665&#x2F;11284439629824&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;105&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;95&#x2F;8463329722368&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;106&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;19&#x2F;11284439629824&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;107&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;1&#x2F;5642219814912&lt;&#x2F;span&gt;
&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-yaml&quot;&gt;108&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;1&#x2F;101559956668416&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;p&gt;
&lt;&#x2F;details&gt;
&lt;details&gt;&lt;summary style=&quot;cursor:pointer&quot;&gt;&lt;b&gt;3. Tabulated values for 3 dice multinomial probability distribution&lt;&#x2F;b&gt;&lt;&#x2F;summary&gt;
&lt;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.wolframalpha.com&#x2F;input?i2d=true&amp;amp;i=+Divide%5B1%2CPower%5B6%2C3%5D%5DSum%5BPower%5B%5C%2840%29-1%5C%2841%29%2Ck%5D+*binomial%5C%2840%293%5C%2844%29+k%5C%2841%29*binomial%5C%2840%2910-6k-1%5C%2844%29+2%5C%2841%29%2C%7Bk%2C0%2Cfloor%5C%2840%29Divide%5B%5C%2840%2910-3%5C%2841%29%2C6%5D%5C%2841%29%7D%5D&quot;&gt;Wolfram Alpha Query&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml:&quot; class=&quot;language-yaml: z-code&quot;&gt;&lt;code class=&quot;language-yaml:&quot; data-lang=&quot;yaml:&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;3: 1&#x2F;216
4: 1&#x2F;72
5: 1&#x2F;36
6: 5&#x2F;108
7: 5&#x2F;72
8: 7&#x2F;72
9: 25&#x2F;216
10: 1&#x2F;8
11: 1&#x2F;8
12: 25&#x2F;216
13: 7&#x2F;72
14: 5&#x2F;72
15: 5&#x2F;108
16: 1&#x2F;36
17: 1&#x2F;72
18: 1&#x2F;216
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;p&gt;
&lt;&#x2F;details&gt;
&lt;details&gt;&lt;summary style=&quot;cursor:pointer&quot;&gt;&lt;b&gt;4. Comparing observed vs. computed by class&lt;&#x2F;b&gt;&lt;&#x2F;summary&gt;
&lt;p&gt;
We compare with the precise $Z_{class}$ distributions worked out by convolution above.
&lt;div id=&quot;probhistappdxpala&quot; style=&quot;width:600px;height:450px;&quot;&gt;&lt;&#x2F;div&gt;
&lt;script&gt;
var data = [trace_trunconv_paladin, trace_obs_paladin];
var layout = {
  title: &quot;Theoretical vs Observed Distributions for Paladin&quot;,
  xaxis: {title: &quot;Roll&quot;},
  yaxis: {title: &quot;Probability&quot;},
};
Plotly.newPlot(document.getElementById(&#x27;probhistappdxpala&#x27;), data, layout);
&lt;&#x2F;script&gt;
&lt;div id=&quot;probhistappdxrang&quot; style=&quot;width:600px;height:450px;&quot;&gt;&lt;&#x2F;div&gt;
&lt;script&gt;
var data = [trace_trunconv_ranger, trace_obs_ranger];
var layout = {
  title: &quot;Theoretical vs Observed Distributions for Ranger&quot;,
  xaxis: {title: &quot;Roll&quot;},
  yaxis: {title: &quot;Probability&quot;},
};
Plotly.newPlot(document.getElementById(&#x27;probhistappdxrang&#x27;), data, layout);
&lt;&#x2F;script&gt;
&lt;p&gt;For fighter we have included the original uncorrected multinomial distribution for 18 dice before doing simulations. It was sufficiently close to the true distribution because flooring a single ability to &lt;code&gt;9&lt;&#x2F;code&gt; amounts to almost nothing in the right tail:&lt;&#x2F;p&gt;
&lt;div id=&quot;probhistappdxfig&quot; style=&quot;width:600px;height:450px;&quot;&gt;&lt;&#x2F;div&gt;
&lt;script&gt;
var data = [trace_trunconv_fighter, trace_obs_fighter, trace_single_trunc];
var layout = {
  title: &quot;Theoretical vs Observed Distributions for Fighter&quot;,
  xaxis: {title: &quot;Roll&quot;},
  yaxis: {title: &quot;Probability&quot;},
};
Plotly.newPlot(document.getElementById(&#x27;probhistappdxfig&#x27;), data, layout);
&lt;&#x2F;script&gt;
&lt;p&gt;That said, the true distribution taking into account the single floored stat has a much better fit.&lt;&#x2F;p&gt;
&lt;&#x2F;p&gt;
&lt;&#x2F;details&gt;
&lt;details&gt;&lt;summary style=&quot;cursor:pointer&quot;&gt;&lt;b&gt;5. Normal approximations&lt;&#x2F;b&gt;&lt;&#x2F;summary&gt;
&lt;p&gt;
&lt;p&gt;An original idea here was to avoid doing all the faff with convolution above, and &amp;quot;just&amp;quot; approximate the distribution with some normal $\mathcal{N}(μ, σ)$.&lt;&#x2F;p&gt;
&lt;p&gt;After all, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;mathworld.wolfram.com&#x2F;Dice.html&quot;&gt;this is suggested for high n&lt;&#x2F;a&gt;, and it will hold even for an unequal &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Central_limit_theorem&quot;&gt;sum of independent random variables with sufficient degrees of freedom&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;However, there are many &lt;strong&gt;complications&lt;&#x2F;strong&gt; with this approach:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;we only &lt;strong&gt;sample&lt;&#x2F;strong&gt; the &lt;strong&gt;doubly censored data&lt;&#x2F;strong&gt;, we don&#x27;t see the full normal distribution&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;distributions&lt;&#x2F;strong&gt; are heavily &lt;strong&gt;shifted&lt;&#x2F;strong&gt; (as can be seen with the true paladin distribution)&lt;&#x2F;li&gt;
&lt;li&gt;estimation of underlying normal distribution relies difficult for classes whose means precedes the truncation point&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It does looks like there are tools to work with truncated or rectified normals:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;extension methods for &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Rectified_Gaussian_distribution#Extension_to_general_bounds&quot;&gt;rectified normal distributions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Truncated_normal_distribution#One_sided_truncation_(of_lower_tail)&quot;&gt;formulas for dealing with truncation of a normal distributions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;rdrr.io&#x2F;cran&#x2F;crch&#x2F;man&#x2F;cnorm.html&quot;&gt;cnorm r library&lt;&#x2F;a&gt; which comes with a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;cran.r-project.org&#x2F;web&#x2F;packages&#x2F;cNORM&#x2F;cNORM.pdf&quot;&gt;giant pdf&lt;&#x2F;a&gt; as documentation to help remind you of why we need rustdoc&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;But this felt like the wrong path to descend, and the path was littered with arcana:&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-dnt=&quot;true&quot; data-theme=&quot;light&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;ah, yes, just a vector. &lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;RvkpS4h0DX&quot;&gt;pic.twitter.com&#x2F;RvkpS4h0DX&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&amp;mdash; eirik ᐸ&amp;#39;⧖ᐳ (@sszynrae) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;sszynrae&#x2F;status&#x2F;1512161877698174983?ref_src=twsrc%5Etfw&quot;&gt;April 7, 2022&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt; &lt;script async src=&quot;https:&#x2F;&#x2F;platform.twitter.com&#x2F;widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;
&lt;p&gt;That said. If anyone wants to fill in something here, or link to alternate methods, feel free to PR in something &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;clux&#x2F;probes&#x2F;edit&#x2F;master&#x2F;content&#x2F;post&#x2F;2022-04-12-baldurs-roll.md&quot;&gt;here&lt;&#x2F;a&gt; or write an &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;clux&#x2F;probes&#x2F;issues&quot;&gt;issue&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;p&gt;
&lt;&#x2F;details&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Vault of Therayne</title>
        <published>2006-08-09T00:00:00+00:00</published>
        <updated>2006-08-09T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://clux.github.io/probes.zola/vault-of-therayne/" type="text/html"/>
        <id>https://clux.github.io/probes.zola/vault-of-therayne/</id>
        
        <summary type="html">&lt;p&gt;An easter egg and puzzle solution for &lt;code&gt;Dungeon Siege 2 Broken World&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
</feed>
